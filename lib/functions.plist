(
	{display = 'abs'; insert = '(${1:int number})';},
	{display = 'acos'; insert = '(${1:float number})';},
	{display = 'acosh'; insert = '(${1:float number})';},
	{display = 'addGlob'; insert = '(${1:string pattern}, ${2:[int flags}, ${3:[array options]]})';},
	{display = 'addPattern'; insert = '(${1:string pattern}, ${2:[string path}, ${3:[array options]]})';},
	{display = 'addcslashes'; insert = '(${1:string str}, ${2:string charlist})';},
	{display = 'addslashes'; insert = '(${1:string str})';},
	{display = 'apache_child_terminate'; insert = '(${1:void})';},
	{display = 'apache_get_modules'; insert = '(${1:void})';},
	{display = 'apache_get_version'; insert = '(${1:void})';},
	{display = 'apache_getenv'; insert = '(${1:string variable}, ${2:[bool walk_to_top]})';},
	{display = 'apache_lookup_uri'; insert = '(${1:string URI})';},
	{display = 'apache_note'; insert = '(${1:string note_name}, ${2:[string note_value]})';},
	{display = 'apache_request_auth_name'; insert = '()';},
	{display = 'apache_request_auth_type'; insert = '()';},
	{display = 'apache_request_discard_request_body'; insert = '()';},
	{display = 'apache_request_err_headers_out'; insert = '(${1:[{string name|array list}}, ${2:[string value}, ${3:[bool replace = false]]]})';},
	{display = 'apache_request_headers'; insert = '(${1:void})';},
	{display = 'apache_request_headers_in'; insert = '()';},
	{display = 'apache_request_headers_out'; insert = '(${1:[{string name|array list}}, ${2:[string value}, ${3:[bool replace = false]]]})';},
	{display = 'apache_request_is_initial_req'; insert = '()';},
	{display = 'apache_request_log_error'; insert = '(${1:string message}, ${2:[long facility]})';},
	{display = 'apache_request_meets_conditions'; insert = '()';},
	{display = 'apache_request_remote_host'; insert = '(${1:[int type]})';},
	{display = 'apache_request_run'; insert = '()';},
	{display = 'apache_request_satisfies'; insert = '()';},
	{display = 'apache_request_server_port'; insert = '()';},
	{display = 'apache_request_set_etag'; insert = '()';},
	{display = 'apache_request_set_last_modified'; insert = '()';},
	{display = 'apache_request_some_auth_required'; insert = '()';},
	{display = 'apache_request_sub_req_lookup_file'; insert = '(${1:string file})';},
	{display = 'apache_request_sub_req_lookup_uri'; insert = '(${1:string uri})';},
	{display = 'apache_request_sub_req_method_uri'; insert = '(${1:string method}, ${2:string uri})';},
	{display = 'apache_request_update_mtime'; insert = '(${1:[int dependency_mtime]})';},
	{display = 'apache_reset_timeout'; insert = '(${1:void})';},
	{display = 'apache_response_headers'; insert = '(${1:void})';},
	{display = 'apache_setenv'; insert = '(${1:string variable}, ${2:string value}, ${3:[bool walk_to_top]})';},
	{display = 'array_change_key_case'; insert = '(${1:array input}, ${2:[int case=CASE_LOWER]})';},
	{display = 'array_chunk'; insert = '(${1:array input}, ${2:int size}, ${3:[bool preserve_keys]})';},
	{display = 'array_combine'; insert = '(${1:array keys}, ${2:array values})';},
	{display = 'array_count_values'; insert = '(${1:array input})';},
	{display = 'array_diff'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_diff_assoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_diff_key'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_diff_uassoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_comp_func})';},
	{display = 'array_diff_ukey'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback key_comp_func})';},
	{display = 'array_fill'; insert = '(${1:int start_key}, ${2:int num}, ${3:mixed val})';},
	{display = 'array_fill_keys'; insert = '(${1:array keys}, ${2:mixed val})';},
	{display = 'array_filter'; insert = '(${1:array input}, ${2:[mixed callback]})';},
	{display = 'array_flip'; insert = '(${1:array input})';},
	{display = 'array_intersect'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_intersect_assoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_intersect_key'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_intersect_uassoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback key_compare_func})';},
	{display = 'array_intersect_ukey'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback key_compare_func})';},
	{display = 'array_key_exists'; insert = '(${1:mixed key}, ${2:array search})';},
	{display = 'array_keys'; insert = '(${1:array input}, ${2:[mixed search_value}, ${3:[bool strict]]})';},
	{display = 'array_map'; insert = '(${1:mixed callback}, ${2:array input1}, ${3:[array input2}, ${4:...]})';},
	{display = 'array_merge'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_merge_recursive'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_multisort'; insert = '(${1:array ar1}, ${2:[SORT_ASC|SORT_DESC}, ${3:[SORT_REGULAR|SORT_NUMERIC|SORT_STRING]]}, ${4:[array ar2}, ${5:[SORT_ASC|SORT_DESC}, ${6:[SORT_REGULAR|SORT_NUMERIC|SORT_STRING]]}, ${7:...]})';},
	{display = 'array_pad'; insert = '(${1:array input}, ${2:int pad_size}, ${3:mixed pad_value})';},
	{display = 'array_pop'; insert = '(${1:array stack})';},
	{display = 'array_product'; insert = '(${1:array input})';},
	{display = 'array_push'; insert = '(${1:array stack}, ${2:mixed var}, ${3:[mixed ...]})';},
	{display = 'array_rand'; insert = '(${1:array input}, ${2:[int num_req]})';},
	{display = 'array_reduce'; insert = '(${1:array input}, ${2:mixed callback}, ${3:[mixed initial]})';},
	{display = 'array_replace'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_replace_recursive'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]})';},
	{display = 'array_reverse'; insert = '(${1:array input}, ${2:[bool preserve keys]})';},
	{display = 'array_search'; insert = '(${1:mixed needle}, ${2:array haystack}, ${3:[bool strict]})';},
	{display = 'array_shift'; insert = '(${1:array stack})';},
	{display = 'array_slice'; insert = '(${1:array input}, ${2:int offset}, ${3:[int length}, ${4:[bool preserve_keys]]})';},
	{display = 'array_splice'; insert = '(${1:array input}, ${2:int offset}, ${3:[int length}, ${4:[array replacement]]})';},
	{display = 'array_sum'; insert = '(${1:array input})';},
	{display = 'array_udiff'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_comp_func})';},
	{display = 'array_udiff_assoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback key_comp_func})';},
	{display = 'array_udiff_uassoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_comp_func}, ${5:callback key_comp_func})';},
	{display = 'array_uintersect'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_compare_func})';},
	{display = 'array_uintersect_assoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_compare_func})';},
	{display = 'array_uintersect_uassoc'; insert = '(${1:array arr1}, ${2:array arr2}, ${3:[array ...]}, ${4:callback data_compare_func}, ${5:callback key_compare_func})';},
	{display = 'array_unique'; insert = '(${1:array input}, ${2:[int sort_flags]})';},
	{display = 'array_unshift'; insert = '(${1:array stack}, ${2:mixed var}, ${3:[mixed ...]})';},
	{display = 'array_values'; insert = '(${1:array input})';},
	{display = 'array_walk'; insert = '(${1:array input}, ${2:string funcname}, ${3:[mixed userdata]})';},
	{display = 'array_walk_recursive'; insert = '(${1:array input}, ${2:string funcname}, ${3:[mixed userdata]})';},
	{display = 'arsort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'asin'; insert = '(${1:float number})';},
	{display = 'asinh'; insert = '(${1:float number})';},
	{display = 'asort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'assert'; insert = '(${1:string|bool assertion})';},
	{display = 'assert_options'; insert = '(${1:int what}, ${2:[mixed value]})';},
	{display = 'atan'; insert = '(${1:float number})';},
	{display = 'atan2'; insert = '(${1:float y}, ${2:float x})';},
	{display = 'atanh'; insert = '(${1:float number})';},
	{display = 'attachIterator'; insert = '(${1:Iterator iterator}, ${2:[mixed info]})';},
	{display = 'base64_decode'; insert = '(${1:string str}, ${2:[bool strict]})';},
	{display = 'base64_encode'; insert = '(${1:string str})';},
	{display = 'base_convert'; insert = '(${1:string number}, ${2:int frombase}, ${3:int tobase})';},
	{display = 'basename'; insert = '(${1:string path}, ${2:[string suffix]})';},
	{display = 'bcadd'; insert = '(${1:string left_operand}, ${2:string right_operand}, ${3:[int scale]})';},
	{display = 'bccomp'; insert = '(${1:string left_operand}, ${2:string right_operand}, ${3:[int scale]})';},
	{display = 'bcdiv'; insert = '(${1:string left_operand}, ${2:string right_operand}, ${3:[int scale]})';},
	{display = 'bcmod'; insert = '(${1:string left_operand}, ${2:string right_operand})';},
	{display = 'bcmul'; insert = '(${1:string left_operand}, ${2:string right_operand}, ${3:[int scale]})';},
	{display = 'bcpow'; insert = '(${1:string x}, ${2:string y}, ${3:[int scale]})';},
	{display = 'bcpowmod'; insert = '(${1:string x}, ${2:string y}, ${3:string mod}, ${4:[int scale]})';},
	{display = 'bcscale'; insert = '(${1:int scale})';},
	{display = 'bcsqrt'; insert = '(${1:string operand}, ${2:[int scale]})';},
	{display = 'bcsub'; insert = '(${1:string left_operand}, ${2:string right_operand}, ${3:[int scale]})';},
	{display = 'bin2hex'; insert = '(${1:string data})';},
	{display = 'bind_textdomain_codeset'; insert = '(${1:string domain}, ${2:string codeset})';},
	{display = 'bindec'; insert = '(${1:string binary_number})';},
	{display = 'bindtextdomain'; insert = '(${1:string domain_name}, ${2:string dir})';},
	{display = 'birdstep_autocommit'; insert = '(${1:int index})';},
	{display = 'birdstep_close'; insert = '(${1:int id})';},
	{display = 'birdstep_commit'; insert = '(${1:int index})';},
	{display = 'birdstep_connect'; insert = '(${1:string server}, ${2:string user}, ${3:string pass})';},
	{display = 'birdstep_exec'; insert = '(${1:int index}, ${2:string exec_str})';},
	{display = 'birdstep_fetch'; insert = '(${1:int index})';},
	{display = 'birdstep_fieldname'; insert = '(${1:int index}, ${2:int col})';},
	{display = 'birdstep_fieldnum'; insert = '(${1:int index})';},
	{display = 'birdstep_freeresult'; insert = '(${1:int index})';},
	{display = 'birdstep_off_autocommit'; insert = '(${1:int index})';},
	{display = 'birdstep_result'; insert = '(${1:int index}, ${2:mixed col})';},
	{display = 'birdstep_rollback'; insert = '(${1:int index})';},
	{display = 'bzcompress'; insert = '(${1:string source}, ${2:[int blocksize100k}, ${3:[int workfactor]]})';},
	{display = 'bzdecompress'; insert = '(${1:string source}, ${2:[int small]})';},
	{display = 'bzerrno'; insert = '(${1:resource bz})';},
	{display = 'bzerror'; insert = '(${1:resource bz})';},
	{display = 'bzerrstr'; insert = '(${1:resource bz})';},
	{display = 'bzopen'; insert = '(${1:string|int file|fp}, ${2:string mode})';},
	{display = 'bzread'; insert = '(${1:resource bz}, ${2:[int length]})';},
	{display = 'cal_days_in_month'; insert = '(${1:int calendar}, ${2:int month}, ${3:int year})';},
	{display = 'cal_from_jd'; insert = '(${1:int jd}, ${2:int calendar})';},
	{display = 'cal_info'; insert = '(${1:[int calendar]})';},
	{display = 'cal_to_jd'; insert = '(${1:int calendar}, ${2:int month}, ${3:int day}, ${4:int year})';},
	{display = 'call_user_func'; insert = '(${1:mixed function_name}, ${2:[mixed parmeter]}, ${3:[mixed ...]})';},
	{display = 'call_user_func_array'; insert = '(${1:string function_name}, ${2:array parameters})';},
	{display = 'call_user_method'; insert = '(${1:string method_name}, ${2:mixed object}, ${3:[mixed parameter]}, ${4:[mixed ...]})';},
	{display = 'call_user_method_array'; insert = '(${1:string method_name}, ${2:mixed object}, ${3:array params})';},
	{display = 'ceil'; insert = '(${1:float number})';},
	{display = 'chdir'; insert = '(${1:string directory})';},
	{display = 'checkdate'; insert = '(${1:int month}, ${2:int day}, ${3:int year})';},
	{display = 'chgrp'; insert = '(${1:string filename}, ${2:mixed group})';},
	{display = 'chmod'; insert = '(${1:string filename}, ${2:int mode})';},
	{display = 'chown'; insert = '(${1:string filename}, ${2:mixed user})';},
	{display = 'chr'; insert = '(${1:int ascii})';},
	{display = 'chroot'; insert = '(${1:string directory})';},
	{display = 'chunk_split'; insert = '(${1:string str}, ${2:[int chunklen}, ${3:[string ending]]})';},
	{display = 'class_alias'; insert = '(${1:string user_class_name}, ${2:string alias_name}, ${3:[bool autoload]})';},
	{display = 'class_exists'; insert = '(${1:string classname}, ${2:[bool autoload]})';},
	{display = 'class_implements'; insert = '(${1:mixed what}, ${2:[bool autoload ]})';},
	{display = 'class_parents'; insert = '(${1:object instance}, ${2:[boolean autoload = true]})';},
	{display = 'clearstatcache'; insert = '(${1:[bool clear_realpath_cache}, ${2:[string filename]]})';},
	{display = 'closedir'; insert = '(${1:[resource dir_handle]})';},
	{display = 'closelog'; insert = '(${1:void})';},
	{display = 'collator_asort'; insert = '(${1:Collator $coll}, ${2:array(string) $arr})';},
	{display = 'collator_compare'; insert = '(${1:Collator $coll}, ${2:string $str1}, ${3:string $str2})';},
	{display = 'collator_create'; insert = '(${1:string $locale})';},
	{display = 'collator_get_attribute'; insert = '(${1:Collator $coll}, ${2:int $attr})';},
	{display = 'collator_get_error_code'; insert = '(${1:Collator $coll})';},
	{display = 'collator_get_error_message'; insert = '(${1:Collator $coll})';},
	{display = 'collator_get_locale'; insert = '(${1:Collator $coll}, ${2:int $type})';},
	{display = 'collator_get_sort_key'; insert = '(${1:Collator $coll}, ${2:string $str})';},
	{display = 'collator_get_strength'; insert = '(${1:Collator coll})';},
	{display = 'collator_set_attribute'; insert = '(${1:Collator $coll}, ${2:int $attr}, ${3:int $val})';},
	{display = 'collator_set_strength'; insert = '(${1:Collator coll}, ${2:int strength})';},
	{display = 'collator_sort'; insert = '(${1:Collator $coll}, ${2:array(string) $arr}, ${3:[int $sort_flags]})';},
	{display = 'collator_sort_with_sort_keys'; insert = '(${1:Collator $coll}, ${2:array(string) $arr})';},
	{display = 'com_create_guid'; insert = '()';},
	{display = 'com_event_sink'; insert = '(${1:object comobject}, ${2:object sinkobject}, ${3:[mixed sinkinterface]})';},
	{display = 'com_get_active_object'; insert = '(${1:string progid}, ${2:[int code_page ]})';},
	{display = 'com_load_typelib'; insert = '(${1:string typelib_name}, ${2:[int case_insensitive]})';},
	{display = 'com_message_pump'; insert = '(${1:[int timeoutms]})';},
	{display = 'com_print_typeinfo'; insert = '(${1:object comobject | string typelib}, ${2:string dispinterface}, ${3:bool wantsink})';},
	{display = 'compact'; insert = '(${1:mixed var_names}, ${2:[mixed ...]})';},
	{display = 'compose_locale'; insert = '(${1:$array})';},
	{display = 'confirm_extname_compiled'; insert = '(${1:string arg})';},
	{display = 'connection_aborted'; insert = '(${1:void})';},
	{display = 'connection_status'; insert = '(${1:void})';},
	{display = 'constant'; insert = '(${1:string const_name})';},
	{display = 'convert_cyr_string'; insert = '(${1:string str}, ${2:string from}, ${3:string to})';},
	{display = 'convert_uudecode'; insert = '(${1:string data})';},
	{display = 'convert_uuencode'; insert = '(${1:string data})';},
	{display = 'copy'; insert = '(${1:string source_file}, ${2:string destination_file}, ${3:[resource context]})';},
	{display = 'cos'; insert = '(${1:float number})';},
	{display = 'cosh'; insert = '(${1:float number})';},
	{display = 'count'; insert = '(${1:mixed var}, ${2:[int mode]})';},
	{display = 'count_chars'; insert = '(${1:string input}, ${2:[int mode]})';},
	{display = 'crc32'; insert = '(${1:string str})';},
	{display = 'create_function'; insert = '(${1:string args}, ${2:string code})';},
	{display = 'crypt'; insert = '(${1:string str}, ${2:[string salt]})';},
	{display = 'ctype_alnum'; insert = '(${1:mixed c})';},
	{display = 'ctype_alpha'; insert = '(${1:mixed c})';},
	{display = 'ctype_cntrl'; insert = '(${1:mixed c})';},
	{display = 'ctype_digit'; insert = '(${1:mixed c})';},
	{display = 'ctype_graph'; insert = '(${1:mixed c})';},
	{display = 'ctype_lower'; insert = '(${1:mixed c})';},
	{display = 'ctype_print'; insert = '(${1:mixed c})';},
	{display = 'ctype_punct'; insert = '(${1:mixed c})';},
	{display = 'ctype_space'; insert = '(${1:mixed c})';},
	{display = 'ctype_upper'; insert = '(${1:mixed c})';},
	{display = 'ctype_xdigit'; insert = '(${1:mixed c})';},
	{display = 'curl_close'; insert = '(${1:resource ch})';},
	{display = 'curl_copy_handle'; insert = '(${1:resource ch})';},
	{display = 'curl_errno'; insert = '(${1:resource ch})';},
	{display = 'curl_error'; insert = '(${1:resource ch})';},
	{display = 'curl_exec'; insert = '(${1:resource ch})';},
	{display = 'curl_getinfo'; insert = '(${1:resource ch}, ${2:[int option]})';},
	{display = 'curl_init'; insert = '(${1:[string url]})';},
	{display = 'curl_multi_add_handle'; insert = '(${1:resource mh}, ${2:resource ch})';},
	{display = 'curl_multi_close'; insert = '(${1:resource mh})';},
	{display = 'curl_multi_exec'; insert = '(${1:resource mh}, ${2:int &still_running})';},
	{display = 'curl_multi_getcontent'; insert = '(${1:resource ch})';},
	{display = 'curl_multi_info_read'; insert = '(${1:resource mh}, ${2:[long msgs_in_queue]})';},
	{display = 'curl_multi_init'; insert = '(${1:void})';},
	{display = 'curl_multi_remove_handle'; insert = '(${1:resource mh}, ${2:resource ch})';},
	{display = 'curl_multi_select'; insert = '(${1:resource mh}, ${2:[double timeout]})';},
	{display = 'curl_setopt'; insert = '(${1:resource ch}, ${2:int option}, ${3:mixed value})';},
	{display = 'curl_setopt_array'; insert = '(${1:resource ch}, ${2:array options})';},
	{display = 'curl_version'; insert = '(${1:[int version]})';},
	{display = 'current'; insert = '(${1:array array_arg})';},
	{display = 'date'; insert = '(${1:string format}, ${2:[long timestamp]})';},
	{display = 'date_add'; insert = '(${1:DateTime object}, ${2:DateInterval interval})';},
	{display = 'date_create'; insert = '(${1:[string time}, ${2:[DateTimeZone object]]})';},
	{display = 'date_create_from_format'; insert = '(${1:string format}, ${2:string time}, ${3:[DateTimeZone object]})';},
	{display = 'date_date_set'; insert = '(${1:DateTime object}, ${2:long year}, ${3:long month}, ${4:long day})';},
	{display = 'date_default_timezone_get'; insert = '()';},
	{display = 'date_default_timezone_set'; insert = '(${1:string timezone_identifier})';},
	{display = 'date_diff'; insert = '(${1:DateTime object}, ${2:[bool absolute]})';},
	{display = 'date_format'; insert = '(${1:DateTime object}, ${2:string format})';},
	{display = 'date_get_last_errors'; insert = '()';},
	{display = 'date_interval_create_from_date_string'; insert = '(${1:string time})';},
	{display = 'date_interval_format'; insert = '(${1:DateInterval object}, ${2:string format})';},
	{display = 'date_isodate_set'; insert = '(${1:DateTime object}, ${2:long year}, ${3:long week}, ${4:[long day]})';},
	{display = 'date_modify'; insert = '(${1:DateTime object}, ${2:string modify})';},
	{display = 'date_offset_get'; insert = '(${1:DateTime object})';},
	{display = 'date_parse'; insert = '(${1:string date})';},
	{display = 'date_parse_from_format'; insert = '(${1:string format}, ${2:string date})';},
	{display = 'date_sub'; insert = '(${1:DateTime object}, ${2:DateInterval interval})';},
	{display = 'date_sun_info'; insert = '(${1:long time}, ${2:float latitude}, ${3:float longitude})';},
	{display = 'date_sunrise'; insert = '(${1:mixed time}, ${2:[int format}, ${3:[float latitude}, ${4:[float longitude}, ${5:[float zenith}, ${6:[float gmt_offset]]]]]})';},
	{display = 'date_sunset'; insert = '(${1:mixed time}, ${2:[int format}, ${3:[float latitude}, ${4:[float longitude}, ${5:[float zenith}, ${6:[float gmt_offset]]]]]})';},
	{display = 'date_time_set'; insert = '(${1:DateTime object}, ${2:long hour}, ${3:long minute}, ${4:[long second]})';},
	{display = 'date_timestamp_get'; insert = '(${1:DateTime object})';},
	{display = 'date_timestamp_set'; insert = '(${1:DateTime object}, ${2:long unixTimestamp})';},
	{display = 'date_timezone_get'; insert = '(${1:DateTime object})';},
	{display = 'date_timezone_set'; insert = '(${1:DateTime object}, ${2:DateTimeZone object})';},
	{display = 'datefmt_create'; insert = '(${1:string $locale}, ${2:long date_type}, ${3:long time_type}, ${4:[string $timezone_str}, ${5:long $calendar}, ${6:string $pattern]})';},
	{display = 'datefmt_format'; insert = '(${1:[mixed]int $args or array $args})';},
	{display = 'datefmt_get_calendar'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_get_datetype'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_get_error_code'; insert = '(${1:IntlDateFormatter $nf})';},
	{display = 'datefmt_get_error_message'; insert = '(${1:IntlDateFormatter $coll})';},
	{display = 'datefmt_get_locale'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_get_pattern'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_get_timetype'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_get_timezone_id'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_isLenient'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_localtime'; insert = '(${1:IntlDateFormatter $fmt}, ${2:string $text_to_parse}, ${3:[int $parse_pos ]})';},
	{display = 'datefmt_parse'; insert = '(${1:IntlDateFormatter $fmt}, ${2:string $text_to_parse}, ${3:[int $parse_pos]})';},
	{display = 'datefmt_setLenient'; insert = '(${1:IntlDateFormatter $mf})';},
	{display = 'datefmt_set_calendar'; insert = '(${1:IntlDateFormatter $mf}, ${2:int $calendar})';},
	{display = 'datefmt_set_pattern'; insert = '(${1:IntlDateFormatter $mf}, ${2:string $pattern})';},
	{display = 'datefmt_set_timezone_id'; insert = '(${1:IntlDateFormatter $mf}, ${2:$timezone_id})';},
	{display = 'dba_close'; insert = '(${1:resource handle})';},
	{display = 'dba_delete'; insert = '(${1:string key}, ${2:resource handle})';},
	{display = 'dba_exists'; insert = '(${1:string key}, ${2:resource handle})';},
	{display = 'dba_fetch'; insert = '(${1:string key}, ${2:[int skip}, ${3:] resource handle})';},
	{display = 'dba_firstkey'; insert = '(${1:resource handle})';},
	{display = 'dba_handlers'; insert = '(${1:[bool full_info]})';},
	{display = 'dba_insert'; insert = '(${1:string key}, ${2:string value}, ${3:resource handle})';},
	{display = 'dba_key_split'; insert = '(${1:string key})';},
	{display = 'dba_list'; insert = '()';},
	{display = 'dba_nextkey'; insert = '(${1:resource handle})';},
	{display = 'dba_open'; insert = '(${1:string path}, ${2:string mode}, ${3:[string handlername}, ${4:string ...]})';},
	{display = 'dba_optimize'; insert = '(${1:resource handle})';},
	{display = 'dba_popen'; insert = '(${1:string path}, ${2:string mode}, ${3:[string handlername}, ${4:string ...]})';},
	{display = 'dba_replace'; insert = '(${1:string key}, ${2:string value}, ${3:resource handle})';},
	{display = 'dba_sync'; insert = '(${1:resource handle})';},
	{display = 'dcgettext'; insert = '(${1:string domain_name}, ${2:string msgid}, ${3:long category})';},
	{display = 'dcngettext'; insert = '(${1:string domain}, ${2:string msgid1}, ${3:string msgid2}, ${4:int n}, ${5:int category})';},
	{display = 'debug_backtrace'; insert = '(${1:[bool provide_object]})';},
	{display = 'debug_print_backtrace'; insert = '(${1:void})';},
	{display = 'debug_zval_dump'; insert = '(${1:mixed var})';},
	{display = 'decbin'; insert = '(${1:int decimal_number})';},
	{display = 'dechex'; insert = '(${1:int decimal_number})';},
	{display = 'decoct'; insert = '(${1:int decimal_number})';},
	{display = 'define'; insert = '(${1:string constant_name}, ${2:mixed value}, ${3:boolean case_insensitive=false})';},
	{display = 'define_syslog_variables'; insert = '(${1:void})';},
	{display = 'defined'; insert = '(${1:string constant_name})';},
	{display = 'deg2rad'; insert = '(${1:float number})';},
	{display = 'dgettext'; insert = '(${1:string domain_name}, ${2:string msgid})';},
	{display = 'die'; insert = '(${1:[mixed status]})';},
	{display = 'dir'; insert = '(${1:string directory}, ${2:[resource context]})';},
	{display = 'dirname'; insert = '(${1:string path})';},
	{display = 'disk_free_space'; insert = '(${1:string path})';},
	{display = 'disk_total_space'; insert = '(${1:string path})';},
	{display = 'display_disabled_function'; insert = '(${1:void})';},
	{display = 'dl'; insert = '(${1:string extension_filename})';},
	{display = 'dngettext'; insert = '(${1:string domain}, ${2:string msgid1}, ${3:string msgid2}, ${4:int count})';},
	{display = 'dns_check_record'; insert = '(${1:string host}, ${2:[string type]})';},
	{display = 'dns_get_mx'; insert = '(${1:string hostname}, ${2:array mxhosts}, ${3:[array weight]})';},
	{display = 'dns_get_record'; insert = '(${1:string hostname}, ${2:[int type}, ${3:[array authns}, ${4:array addtl]]})';},
	{display = 'dom_attr_is_id'; insert = '()';},
	{display = 'dom_characterdata_append_data'; insert = '(${1:string arg})';},
	{display = 'dom_characterdata_delete_data'; insert = '(${1:int offset}, ${2:int count})';},
	{display = 'dom_characterdata_insert_data'; insert = '(${1:int offset}, ${2:string arg})';},
	{display = 'dom_characterdata_replace_data'; insert = '(${1:int offset}, ${2:int count}, ${3:string arg})';},
	{display = 'dom_characterdata_substring_data'; insert = '(${1:int offset}, ${2:int count})';},
	{display = 'dom_document_adopt_node'; insert = '(${1:DOMNode source})';},
	{display = 'dom_document_create_attribute'; insert = '(${1:string name})';},
	{display = 'dom_document_create_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string qualifiedName})';},
	{display = 'dom_document_create_cdatasection'; insert = '(${1:string data})';},
	{display = 'dom_document_create_comment'; insert = '(${1:string data})';},
	{display = 'dom_document_create_document_fragment'; insert = '()';},
	{display = 'dom_document_create_element'; insert = '(${1:string tagName}, ${2:[string value]})';},
	{display = 'dom_document_create_element_ns'; insert = '(${1:string namespaceURI}, ${2:string qualifiedName}, ${3:[string value]})';},
	{display = 'dom_document_create_entity_reference'; insert = '(${1:string name})';},
	{display = 'dom_document_create_processing_instruction'; insert = '(${1:string target}, ${2:string data})';},
	{display = 'dom_document_create_text_node'; insert = '(${1:string data})';},
	{display = 'dom_document_get_element_by_id'; insert = '(${1:string elementId})';},
	{display = 'dom_document_get_elements_by_tag_name'; insert = '(${1:string tagname})';},
	{display = 'dom_document_get_elements_by_tag_name_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_document_import_node'; insert = '(${1:DOMNode importedNode}, ${2:boolean deep})';},
	{display = 'dom_document_load'; insert = '(${1:string source}, ${2:[int options]})';},
	{display = 'dom_document_load_html'; insert = '(${1:string source})';},
	{display = 'dom_document_load_html_file'; insert = '(${1:string source})';},
	{display = 'dom_document_loadxml'; insert = '(${1:string source}, ${2:[int options]})';},
	{display = 'dom_document_normalize_document'; insert = '()';},
	{display = 'dom_document_relaxNG_validate_file'; insert = '(${1:string filename})';},
	{display = 'dom_document_relaxNG_validate_xml'; insert = '(${1:string source})';},
	{display = 'dom_document_rename_node'; insert = '(${1:node n}, ${2:string namespaceURI}, ${3:string qualifiedName})';},
	{display = 'dom_document_save'; insert = '(${1:string file})';},
	{display = 'dom_document_save_html'; insert = '()';},
	{display = 'dom_document_save_html_file'; insert = '(${1:string file})';},
	{display = 'dom_document_savexml'; insert = '(${1:[node n]})';},
	{display = 'dom_document_schema_validate'; insert = '(${1:string source})';},
	{display = 'dom_document_schema_validate_file'; insert = '(${1:string filename})';},
	{display = 'dom_document_validate'; insert = '()';},
	{display = 'dom_document_xinclude'; insert = '(${1:[int options]})';},
	{display = 'dom_domconfiguration_can_set_parameter'; insert = '(${1:string name}, ${2:domuserdata value})';},
	{display = 'dom_domconfiguration_get_parameter'; insert = '(${1:string name})';},
	{display = 'dom_domconfiguration_set_parameter'; insert = '(${1:string name}, ${2:domuserdata value})';},
	{display = 'dom_domerrorhandler_handle_error'; insert = '(${1:domerror error})';},
	{display = 'dom_domimplementation_create_document'; insert = '(${1:string namespaceURI}, ${2:string qualifiedName}, ${3:DOMDocumentType doctype})';},
	{display = 'dom_domimplementation_create_document_type'; insert = '(${1:string qualifiedName}, ${2:string publicId}, ${3:string systemId})';},
	{display = 'dom_domimplementation_get_feature'; insert = '(${1:string feature}, ${2:string version})';},
	{display = 'dom_domimplementation_has_feature'; insert = '(${1:string feature}, ${2:string version})';},
	{display = 'dom_domimplementationlist_item'; insert = '(${1:int index})';},
	{display = 'dom_domimplementationsource_get_domimplementation'; insert = '(${1:string features})';},
	{display = 'dom_domimplementationsource_get_domimplementations'; insert = '(${1:string features})';},
	{display = 'dom_domstringlist_item'; insert = '(${1:int index})';},
	{display = 'dom_element_get_attribute'; insert = '(${1:string name})';},
	{display = 'dom_element_get_attribute_node'; insert = '(${1:string name})';},
	{display = 'dom_element_get_attribute_node_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_element_get_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_element_get_elements_by_tag_name'; insert = '(${1:string name})';},
	{display = 'dom_element_get_elements_by_tag_name_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_element_has_attribute'; insert = '(${1:string name})';},
	{display = 'dom_element_has_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_element_remove_attribute'; insert = '(${1:string name})';},
	{display = 'dom_element_remove_attribute_node'; insert = '(${1:DOMAttr oldAttr})';},
	{display = 'dom_element_remove_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_element_set_attribute'; insert = '(${1:string name}, ${2:string value})';},
	{display = 'dom_element_set_attribute_node'; insert = '(${1:DOMAttr newAttr})';},
	{display = 'dom_element_set_attribute_node_ns'; insert = '(${1:DOMAttr newAttr})';},
	{display = 'dom_element_set_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string qualifiedName}, ${3:string value})';},
	{display = 'dom_element_set_id_attribute'; insert = '(${1:string name}, ${2:boolean isId})';},
	{display = 'dom_element_set_id_attribute_node'; insert = '(${1:attr idAttr}, ${2:boolean isId})';},
	{display = 'dom_element_set_id_attribute_ns'; insert = '(${1:string namespaceURI}, ${2:string localName}, ${3:boolean isId})';},
	{display = 'dom_import_simplexml'; insert = '(${1:sxeobject node})';},
	{display = 'dom_namednodemap_get_named_item'; insert = '(${1:string name})';},
	{display = 'dom_namednodemap_get_named_item_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_namednodemap_item'; insert = '(${1:int index})';},
	{display = 'dom_namednodemap_remove_named_item'; insert = '(${1:string name})';},
	{display = 'dom_namednodemap_remove_named_item_ns'; insert = '(${1:string namespaceURI}, ${2:string localName})';},
	{display = 'dom_namednodemap_set_named_item'; insert = '(${1:DOMNode arg})';},
	{display = 'dom_namednodemap_set_named_item_ns'; insert = '(${1:DOMNode arg})';},
	{display = 'dom_namelist_get_name'; insert = '(${1:int index})';},
	{display = 'dom_namelist_get_namespace_uri'; insert = '(${1:int index})';},
	{display = 'dom_node_append_child'; insert = '(${1:DomNode newChild})';},
	{display = 'dom_node_clone_node'; insert = '(${1:boolean deep})';},
	{display = 'dom_node_compare_document_position'; insert = '(${1:DomNode other})';},
	{display = 'dom_node_get_feature'; insert = '(${1:string feature}, ${2:string version})';},
	{display = 'dom_node_get_user_data'; insert = '(${1:string key})';},
	{display = 'dom_node_has_attributes'; insert = '()';},
	{display = 'dom_node_has_child_nodes'; insert = '()';},
	{display = 'dom_node_insert_before'; insert = '(${1:DomNode newChild}, ${2:DomNode refChild})';},
	{display = 'dom_node_is_default_namespace'; insert = '(${1:string namespaceURI})';},
	{display = 'dom_node_is_equal_node'; insert = '(${1:DomNode arg})';},
	{display = 'dom_node_is_same_node'; insert = '(${1:DomNode other})';},
	{display = 'dom_node_is_supported'; insert = '(${1:string feature}, ${2:string version})';},
	{display = 'dom_node_lookup_namespace_uri'; insert = '(${1:string prefix})';},
	{display = 'dom_node_lookup_prefix'; insert = '(${1:string namespaceURI})';},
	{display = 'dom_node_normalize'; insert = '()';},
	{display = 'dom_node_remove_child'; insert = '(${1:DomNode oldChild})';},
	{display = 'dom_node_replace_child'; insert = '(${1:DomNode newChild}, ${2:DomNode oldChild})';},
	{display = 'dom_node_set_user_data'; insert = '(${1:string key}, ${2:mixed data}, ${3:userdatahandler handler})';},
	{display = 'dom_nodelist_item'; insert = '(${1:int index})';},
	{display = 'dom_string_extend_find_offset16'; insert = '(${1:int offset32})';},
	{display = 'dom_string_extend_find_offset32'; insert = '(${1:int offset16})';},
	{display = 'dom_text_is_whitespace_in_element_content'; insert = '()';},
	{display = 'dom_text_replace_whole_text'; insert = '(${1:string content})';},
	{display = 'dom_text_split_text'; insert = '(${1:int offset})';},
	{display = 'dom_userdatahandler_handle'; insert = '(${1:short operation}, ${2:string key}, ${3:domobject data}, ${4:node src}, ${5:node dst})';},
	{display = 'dom_xpath_evaluate'; insert = '(${1:string expr}, ${2:[DOMNode context]})';},
	{display = 'dom_xpath_query'; insert = '(${1:string expr}, ${2:[DOMNode context]})';},
	{display = 'dom_xpath_register_ns'; insert = '(${1:string prefix}, ${2:string uri})';},
	{display = 'dom_xpath_register_php_functions'; insert = '()';},
	{display = 'each'; insert = '(${1:array arr})';},
	{display = 'easter_date'; insert = '(${1:[int year]})';},
	{display = 'easter_days'; insert = '(${1:[int year}, ${2:[int method]]})';},
	{display = 'echo'; insert = '(${1:string arg1}, ${2:[string ...]})';},
	{display = 'empty'; insert = '(${1:mixed var})';},
	{display = 'enchant_broker_describe'; insert = '(${1:resource broker})';},
	{display = 'enchant_broker_dict_exists'; insert = '(${1:resource broker}, ${2:string tag})';},
	{display = 'enchant_broker_free'; insert = '(${1:resource broker})';},
	{display = 'enchant_broker_free_dict'; insert = '(${1:resource dict})';},
	{display = 'enchant_broker_get_dict_path'; insert = '(${1:resource broker}, ${2:int dict_type})';},
	{display = 'enchant_broker_get_error'; insert = '(${1:resource broker})';},
	{display = 'enchant_broker_init'; insert = '()';},
	{display = 'enchant_broker_list_dicts'; insert = '(${1:resource broker})';},
	{display = 'enchant_broker_request_dict'; insert = '(${1:resource broker}, ${2:string tag})';},
	{display = 'enchant_broker_request_pwl_dict'; insert = '(${1:resource broker}, ${2:string filename})';},
	{display = 'enchant_broker_set_dict_path'; insert = '(${1:resource broker}, ${2:int dict_type}, ${3:string value})';},
	{display = 'enchant_broker_set_ordering'; insert = '(${1:resource broker}, ${2:string tag}, ${3:string ordering})';},
	{display = 'enchant_dict_add_to_personal'; insert = '(${1:resource dict}, ${2:string word})';},
	{display = 'enchant_dict_add_to_session'; insert = '(${1:resource dict}, ${2:string word})';},
	{display = 'enchant_dict_check'; insert = '(${1:resource dict}, ${2:string word})';},
	{display = 'enchant_dict_describe'; insert = '(${1:resource dict})';},
	{display = 'enchant_dict_get_error'; insert = '(${1:resource dict})';},
	{display = 'enchant_dict_is_in_session'; insert = '(${1:resource dict}, ${2:string word})';},
	{display = 'enchant_dict_quick_check'; insert = '(${1:resource dict}, ${2:string word}, ${3:[array &suggestions]})';},
	{display = 'enchant_dict_store_replacement'; insert = '(${1:resource dict}, ${2:string mis}, ${3:string cor})';},
	{display = 'enchant_dict_suggest'; insert = '(${1:resource dict}, ${2:string word})';},
	{display = 'end'; insert = '(${1:array array_arg})';},
	{display = 'ereg'; insert = '(${1:string pattern}, ${2:string string}, ${3:[array registers]})';},
	{display = 'ereg_replace'; insert = '(${1:string pattern}, ${2:string replacement}, ${3:string string})';},
	{display = 'eregi'; insert = '(${1:string pattern}, ${2:string string}, ${3:[array registers]})';},
	{display = 'eregi_replace'; insert = '(${1:string pattern}, ${2:string replacement}, ${3:string string})';},
	{display = 'error_get_last'; insert = '()';},
	{display = 'error_log'; insert = '(${1:string message}, ${2:[int message_type}, ${3:[string destination}, ${4:[string extra_headers]]]})';},
	{display = 'error_reporting'; insert = '(${1:[int new_error_level]})';},
	{display = 'escapeshellarg'; insert = '(${1:string arg})';},
	{display = 'escapeshellcmd'; insert = '(${1:string command})';},
	{display = 'exec'; insert = '(${1:string command}, ${2:[array &output}, ${3:[int &return_value]]})';},
	{display = 'exif_imagetype'; insert = '(${1:string imagefile})';},
	{display = 'exif_read_data'; insert = '(${1:string filename}, ${2:[sections_needed}, ${3:[sub_arrays}, ${4:[read_thumbnail]]]})';},
	{display = 'exif_tagname'; insert = '(${1:index})';},
	{display = 'exif_thumbnail'; insert = '(${1:string filename}, ${2:[&width}, ${3:&height}, ${4:[&imagetype]]})';},
	{display = 'exit'; insert = '(${1:[mixed status]})';},
	{display = 'exp'; insert = '(${1:float number})';},
	{display = 'explode'; insert = '(${1:string separator}, ${2:string str}, ${3:[int limit]})';},
	{display = 'expm1'; insert = '(${1:float number})';},
	{display = 'extension_loaded'; insert = '(${1:string extension_name})';},
	{display = 'extract'; insert = '(${1:array var_array}, ${2:[int extract_type}, ${3:[string prefix]]})';},
	{display = 'ezmlm_hash'; insert = '(${1:string addr})';},
	{display = 'fclose'; insert = '(${1:resource fp})';},
	{display = 'feof'; insert = '(${1:resource fp})';},
	{display = 'fflush'; insert = '(${1:resource fp})';},
	{display = 'fgetc'; insert = '(${1:resource fp})';},
	{display = 'fgetcsv'; insert = '(${1:resource fp}, ${2:[int length}, ${3:[string delimiter}, ${4:[string enclosure}, ${5:[string escape]]]]})';},
	{display = 'fgets'; insert = '(${1:resource fp}, ${2:[int length]})';},
	{display = 'fgetss'; insert = '(${1:resource fp}, ${2:[int length}, ${3:[string allowable_tags]]})';},
	{display = 'file'; insert = '(${1:string filename}, ${2:[int flags}, ${3:[resource context]]})';},
	{display = 'file_exists'; insert = '(${1:string filename})';},
	{display = 'file_get_contents'; insert = '(${1:string filename}, ${2:[bool use_include_path}, ${3:[resource context}, ${4:[long offset}, ${5:[long maxlen]]]]})';},
	{display = 'file_put_contents'; insert = '(${1:string file}, ${2:mixed data}, ${3:[int flags}, ${4:[resource context]]})';},
	{display = 'fileatime'; insert = '(${1:string filename})';},
	{display = 'filectime'; insert = '(${1:string filename})';},
	{display = 'filegroup'; insert = '(${1:string filename})';},
	{display = 'fileinode'; insert = '(${1:string filename})';},
	{display = 'filemtime'; insert = '(${1:string filename})';},
	{display = 'fileowner'; insert = '(${1:string filename})';},
	{display = 'fileperms'; insert = '(${1:string filename})';},
	{display = 'filesize'; insert = '(${1:string filename})';},
	{display = 'filetype'; insert = '(${1:string filename})';},
	{display = 'filter_has_var'; insert = '(${1:constant type}, ${2:string variable_name})';},
	{display = 'filter_input'; insert = '(${1:constant type}, ${2:string variable_name}, ${3:[long filter}, ${4:[mixed options]]})';},
	{display = 'filter_input_array'; insert = '(${1:constant type}, ${2:}, ${3:[mixed options]]})';},
	{display = 'filter_var'; insert = '(${1:mixed variable}, ${2:[long filter}, ${3:[mixed options]]})';},
	{display = 'filter_var_array'; insert = '(${1:array data}, ${2:}, ${3:[mixed options]]})';},
	{display = 'finfo_buffer'; insert = '(${1:resource finfo}, ${2:char *string}, ${3:[int options}, ${4:[resource context]]})';},
	{display = 'finfo_close'; insert = '(${1:resource finfo})';},
	{display = 'finfo_file'; insert = '(${1:resource finfo}, ${2:char *file_name}, ${3:[int options}, ${4:[resource context]]})';},
	{display = 'finfo_open'; insert = '(${1:[int options}, ${2:[string arg]]})';},
	{display = 'finfo_set_flags'; insert = '(${1:resource finfo}, ${2:int options})';},
	{display = 'floatval'; insert = '(${1:mixed var})';},
	{display = 'flock'; insert = '(${1:resource fp}, ${2:int operation}, ${3:[int &wouldblock]})';},
	{display = 'floor'; insert = '(${1:float number})';},
	{display = 'flush'; insert = '(${1:void})';},
	{display = 'fmod'; insert = '(${1:float x}, ${2:float y})';},
	{display = 'fnmatch'; insert = '(${1:string pattern}, ${2:string filename}, ${3:[int flags]})';},
	{display = 'fopen'; insert = '(${1:string filename}, ${2:string mode}, ${3:[bool use_include_path}, ${4:[resource context]]})';},
	{display = 'forward_static_call'; insert = '(${1:mixed function_name}, ${2:[mixed parmeter]}, ${3:[mixed ...]})';},
	{display = 'fpassthru'; insert = '(${1:resource fp})';},
	{display = 'fprintf'; insert = '(${1:resource stream}, ${2:string format}, ${3:[mixed arg1}, ${4:[mixed ...]]})';},
	{display = 'fputcsv'; insert = '(${1:resource fp}, ${2:array fields}, ${3:[string delimiter}, ${4:[string enclosure]]})';},
	{display = 'fread'; insert = '(${1:resource fp}, ${2:int length})';},
	{display = 'frenchtojd'; insert = '(${1:int month}, ${2:int day}, ${3:int year})';},
	{display = 'fscanf'; insert = '(${1:resource stream}, ${2:string format}, ${3:[string ...]})';},
	{display = 'fseek'; insert = '(${1:resource fp}, ${2:int offset}, ${3:[int whence]})';},
	{display = 'fsockopen'; insert = '(${1:string hostname}, ${2:int port}, ${3:[int errno}, ${4:[string errstr}, ${5:[float timeout]]]})';},
	{display = 'fstat'; insert = '(${1:resource fp})';},
	{display = 'ftell'; insert = '(${1:resource fp})';},
	{display = 'ftok'; insert = '(${1:string pathname}, ${2:string proj})';},
	{display = 'ftp_alloc'; insert = '(${1:resource stream}, ${2:int size}, ${3:[&response]})';},
	{display = 'ftp_cdup'; insert = '(${1:resource stream})';},
	{display = 'ftp_chdir'; insert = '(${1:resource stream}, ${2:string directory})';},
	{display = 'ftp_chmod'; insert = '(${1:resource stream}, ${2:int mode}, ${3:string filename})';},
	{display = 'ftp_close'; insert = '(${1:resource stream})';},
	{display = 'ftp_connect'; insert = '(${1:string host}, ${2:[int port}, ${3:[int timeout]]})';},
	{display = 'ftp_delete'; insert = '(${1:resource stream}, ${2:string file})';},
	{display = 'ftp_exec'; insert = '(${1:resource stream}, ${2:string command})';},
	{display = 'ftp_fget'; insert = '(${1:resource stream}, ${2:resource fp}, ${3:string remote_file}, ${4:int mode}, ${5:[int resumepos]})';},
	{display = 'ftp_fput'; insert = '(${1:resource stream}, ${2:string remote_file}, ${3:resource fp}, ${4:int mode}, ${5:[int startpos]})';},
	{display = 'ftp_get'; insert = '(${1:resource stream}, ${2:string local_file}, ${3:string remote_file}, ${4:int mode}, ${5:[int resume_pos]})';},
	{display = 'ftp_get_option'; insert = '(${1:resource stream}, ${2:int option})';},
	{display = 'ftp_login'; insert = '(${1:resource stream}, ${2:string username}, ${3:string password})';},
	{display = 'ftp_mdtm'; insert = '(${1:resource stream}, ${2:string filename})';},
	{display = 'ftp_mkdir'; insert = '(${1:resource stream}, ${2:string directory})';},
	{display = 'ftp_nb_continue'; insert = '(${1:resource stream})';},
	{display = 'ftp_nb_fget'; insert = '(${1:resource stream}, ${2:resource fp}, ${3:string remote_file}, ${4:int mode}, ${5:[int resumepos]})';},
	{display = 'ftp_nb_fput'; insert = '(${1:resource stream}, ${2:string remote_file}, ${3:resource fp}, ${4:int mode}, ${5:[int startpos]})';},
	{display = 'ftp_nb_get'; insert = '(${1:resource stream}, ${2:string local_file}, ${3:string remote_file}, ${4:int mode}, ${5:[int resume_pos]})';},
	{display = 'ftp_nb_put'; insert = '(${1:resource stream}, ${2:string remote_file}, ${3:string local_file}, ${4:int mode}, ${5:[int startpos]})';},
	{display = 'ftp_nlist'; insert = '(${1:resource stream}, ${2:string directory})';},
	{display = 'ftp_pasv'; insert = '(${1:resource stream}, ${2:bool pasv})';},
	{display = 'ftp_put'; insert = '(${1:resource stream}, ${2:string remote_file}, ${3:string local_file}, ${4:int mode}, ${5:[int startpos]})';},
	{display = 'ftp_pwd'; insert = '(${1:resource stream})';},
	{display = 'ftp_raw'; insert = '(${1:resource stream}, ${2:string command})';},
	{display = 'ftp_rawlist'; insert = '(${1:resource stream}, ${2:string directory}, ${3:[bool recursive]})';},
	{display = 'ftp_rename'; insert = '(${1:resource stream}, ${2:string src}, ${3:string dest})';},
	{display = 'ftp_rmdir'; insert = '(${1:resource stream}, ${2:string directory})';},
	{display = 'ftp_set_option'; insert = '(${1:resource stream}, ${2:int option}, ${3:mixed value})';},
	{display = 'ftp_site'; insert = '(${1:resource stream}, ${2:string cmd})';},
	{display = 'ftp_size'; insert = '(${1:resource stream}, ${2:string filename})';},
	{display = 'ftp_ssl_connect'; insert = '(${1:string host}, ${2:[int port}, ${3:[int timeout]]})';},
	{display = 'ftp_systype'; insert = '(${1:resource stream})';},
	{display = 'ftruncate'; insert = '(${1:resource fp}, ${2:int size})';},
	{display = 'func_get_arg'; insert = '(${1:int arg_num})';},
	{display = 'func_get_args'; insert = '()';},
	{display = 'func_num_args'; insert = '(${1:void})';},
	{display = 'function_exists'; insert = '(${1:string function_name})';},
	{display = 'fwrite'; insert = '(${1:resource fp}, ${2:string str}, ${3:[int length]})';},
	{display = 'gc_collect_cycles'; insert = '(${1:void})';},
	{display = 'gc_disable'; insert = '(${1:void})';},
	{display = 'gc_enable'; insert = '(${1:void})';},
	{display = 'gc_enabled'; insert = '(${1:void})';},
	{display = 'gd_info'; insert = '()';},
	{display = 'getKeywords'; insert = '(${1:string $locale})';},
	{display = 'get_browser'; insert = '(${1:[string browser_name}, ${2:[bool return_array]]})';},
	{display = 'get_called_class'; insert = '()';},
	{display = 'get_cfg_var'; insert = '(${1:string option_name})';},
	{display = 'get_class'; insert = '(${1:[object object]})';},
	{display = 'get_class_methods'; insert = '(${1:mixed class})';},
	{display = 'get_class_vars'; insert = '(${1:string class_name})';},
	{display = 'get_current_user'; insert = '(${1:void})';},
	{display = 'get_declared_classes'; insert = '()';},
	{display = 'get_declared_interfaces'; insert = '()';},
	{display = 'get_defined_constants'; insert = '(${1:[bool categorize]})';},
	{display = 'get_defined_functions'; insert = '(${1:void})';},
	{display = 'get_defined_vars'; insert = '(${1:void})';},
	{display = 'get_display_language'; insert = '(${1:$locale}, ${2:[$in_locale = null]})';},
	{display = 'get_display_name'; insert = '(${1:$locale}, ${2:[$in_locale = null]})';},
	{display = 'get_display_region'; insert = '(${1:$locale}, ${2:$in_locale = null})';},
	{display = 'get_display_script'; insert = '(${1:$locale}, ${2:$in_locale = null})';},
	{display = 'get_extension_funcs'; insert = '(${1:string extension_name})';},
	{display = 'get_headers'; insert = '(${1:string url}, ${2:[int format]})';},
	{display = 'get_html_translation_table'; insert = '(${1:[int table}, ${2:[int quote_style]]})';},
	{display = 'get_include_path'; insert = '()';},
	{display = 'get_included_files'; insert = '(${1:void})';},
	{display = 'get_loaded_extensions'; insert = '(${1:[bool zend_extensions]})';},
	{display = 'get_magic_quotes_gpc'; insert = '(${1:void})';},
	{display = 'get_magic_quotes_runtime'; insert = '(${1:void})';},
	{display = 'get_meta_tags'; insert = '(${1:string filename}, ${2:[bool use_include_path]})';},
	{display = 'get_object_vars'; insert = '(${1:object obj})';},
	{display = 'get_parent_class'; insert = '(${1:[mixed object]})';},
	{display = 'get_resource_type'; insert = '(${1:resource res})';},
	{display = 'getallheaders'; insert = '(${1:void})';},
	{display = 'getcwd'; insert = '(${1:void})';},
	{display = 'getdate'; insert = '(${1:[int timestamp]})';},
	{display = 'getenv'; insert = '(${1:string varname})';},
	{display = 'gethostbyaddr'; insert = '(${1:string ip_address})';},
	{display = 'gethostbyname'; insert = '(${1:string hostname})';},
	{display = 'gethostbynamel'; insert = '(${1:string hostname})';},
	{display = 'gethostname'; insert = '()';},
	{display = 'getimagesize'; insert = '(${1:string imagefile}, ${2:[array info]})';},
	{display = 'getlastmod'; insert = '(${1:void})';},
	{display = 'getmygid'; insert = '(${1:void})';},
	{display = 'getmyinode'; insert = '(${1:void})';},
	{display = 'getmypid'; insert = '(${1:void})';},
	{display = 'getmyuid'; insert = '(${1:void})';},
	{display = 'getopt'; insert = '(${1:string options}, ${2:[array longopts]})';},
	{display = 'getprotobyname'; insert = '(${1:string name})';},
	{display = 'getprotobynumber'; insert = '(${1:int proto})';},
	{display = 'getrandmax'; insert = '(${1:void})';},
	{display = 'getrusage'; insert = '(${1:[int who]})';},
	{display = 'getservbyname'; insert = '(${1:string service}, ${2:string protocol})';},
	{display = 'getservbyport'; insert = '(${1:int port}, ${2:string protocol})';},
	{display = 'gettext'; insert = '(${1:string msgid})';},
	{display = 'gettimeofday'; insert = '(${1:[bool get_as_float]})';},
	{display = 'gettype'; insert = '(${1:mixed var})';},
	{display = 'glob'; insert = '(${1:string pattern}, ${2:[int flags]})';},
	{display = 'gmdate'; insert = '(${1:string format}, ${2:[long timestamp]})';},
	{display = 'gmmktime'; insert = '(${1:[int hour}, ${2:[int min}, ${3:[int sec}, ${4:[int mon}, ${5:[int day}, ${6:[int year]]]]]]})';},
	{display = 'gmp_abs'; insert = '(${1:resource a})';},
	{display = 'gmp_add'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_and'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_clrbit'; insert = '(${1:resource &a}, ${2:int index})';},
	{display = 'gmp_cmp'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_com'; insert = '(${1:resource a})';},
	{display = 'gmp_div_q'; insert = '(${1:resource a}, ${2:resource b}, ${3:[int round]})';},
	{display = 'gmp_div_qr'; insert = '(${1:resource a}, ${2:resource b}, ${3:[int round]})';},
	{display = 'gmp_div_r'; insert = '(${1:resource a}, ${2:resource b}, ${3:[int round]})';},
	{display = 'gmp_divexact'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_fact'; insert = '(${1:int a})';},
	{display = 'gmp_gcd'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_gcdext'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_hamdist'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_init'; insert = '(${1:mixed number}, ${2:[int base]})';},
	{display = 'gmp_intval'; insert = '(${1:resource gmpnumber})';},
	{display = 'gmp_invert'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_jacobi'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_legendre'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_mod'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_mul'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_neg'; insert = '(${1:resource a})';},
	{display = 'gmp_nextprime'; insert = '(${1:resource a})';},
	{display = 'gmp_or'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_perfect_square'; insert = '(${1:resource a})';},
	{display = 'gmp_popcount'; insert = '(${1:resource a})';},
	{display = 'gmp_pow'; insert = '(${1:resource base}, ${2:int exp})';},
	{display = 'gmp_powm'; insert = '(${1:resource base}, ${2:resource exp}, ${3:resource mod})';},
	{display = 'gmp_prob_prime'; insert = '(${1:resource a}, ${2:[int reps]})';},
	{display = 'gmp_random'; insert = '(${1:[int limiter]})';},
	{display = 'gmp_scan0'; insert = '(${1:resource a}, ${2:int start})';},
	{display = 'gmp_scan1'; insert = '(${1:resource a}, ${2:int start})';},
	{display = 'gmp_setbit'; insert = '(${1:resource &a}, ${2:int index}, ${3:[bool set_clear]})';},
	{display = 'gmp_sign'; insert = '(${1:resource a})';},
	{display = 'gmp_sqrt'; insert = '(${1:resource a})';},
	{display = 'gmp_sqrtrem'; insert = '(${1:resource a})';},
	{display = 'gmp_strval'; insert = '(${1:resource gmpnumber}, ${2:[int base]})';},
	{display = 'gmp_sub'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmp_testbit'; insert = '(${1:resource a}, ${2:int index})';},
	{display = 'gmp_xor'; insert = '(${1:resource a}, ${2:resource b})';},
	{display = 'gmstrftime'; insert = '(${1:string format}, ${2:[int timestamp]})';},
	{display = 'grapheme_extract'; insert = '(${1:string str}, ${2:int size}, ${3:[int extract_type}, ${4:[int start}, ${5:[int next]]]})';},
	{display = 'grapheme_stripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset ]})';},
	{display = 'grapheme_stristr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part]})';},
	{display = 'grapheme_strlen'; insert = '(${1:string str})';},
	{display = 'grapheme_strpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset ]})';},
	{display = 'grapheme_strripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'grapheme_strrpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'grapheme_strstr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part]})';},
	{display = 'grapheme_substr'; insert = '(${1:string str}, ${2:int start}, ${3:[int length]})';},
	{display = 'gregoriantojd'; insert = '(${1:int month}, ${2:int day}, ${3:int year})';},
	{display = 'gzcompress'; insert = '(${1:string data}, ${2:[int level]})';},
	{display = 'gzdeflate'; insert = '(${1:string data}, ${2:[int level]})';},
	{display = 'gzencode'; insert = '(${1:string data}, ${2:[int level}, ${3:[int encoding_mode]]})';},
	{display = 'gzfile'; insert = '(${1:string filename}, ${2:[int use_include_path]})';},
	{display = 'gzinflate'; insert = '(${1:string data}, ${2:[int length]})';},
	{display = 'gzopen'; insert = '(${1:string filename}, ${2:string mode}, ${3:[int use_include_path]})';},
	{display = 'gzuncompress'; insert = '(${1:string data}, ${2:[int length]})';},
	{display = 'hash'; insert = '(${1:string algo}, ${2:string data}, ${3:[bool raw_output = false]})';},
	{display = 'hash_algos'; insert = '(${1:void})';},
	{display = 'hash_copy'; insert = '(${1:resource context})';},
	{display = 'hash_file'; insert = '(${1:string algo}, ${2:string filename}, ${3:[bool raw_output = false]})';},
	{display = 'hash_final'; insert = '(${1:resource context}, ${2:[bool raw_output=false]})';},
	{display = 'hash_hmac'; insert = '(${1:string algo}, ${2:string data}, ${3:string key}, ${4:[bool raw_output = false]})';},
	{display = 'hash_hmac_file'; insert = '(${1:string algo}, ${2:string filename}, ${3:string key}, ${4:[bool raw_output = false]})';},
	{display = 'hash_init'; insert = '(${1:string algo}, ${2:[int options}, ${3:string key]})';},
	{display = 'hash_update'; insert = '(${1:resource context}, ${2:string data})';},
	{display = 'hash_update_file'; insert = '(${1:resource context}, ${2:string filename}, ${3:[resource context]})';},
	{display = 'hash_update_stream'; insert = '(${1:resource context}, ${2:resource handle}, ${3:[integer length]})';},
	{display = 'header'; insert = '(${1:string header}, ${2:[bool replace}, ${3:[int http_response_code]]})';},
	{display = 'header_remove'; insert = '(${1:[string name]})';},
	{display = 'headers_list'; insert = '(${1:void})';},
	{display = 'headers_sent'; insert = '(${1:[string &$file}, ${2:[int &$line]]})';},
	{display = 'hebrev'; insert = '(${1:string str}, ${2:[int max_chars_per_line]})';},
	{display = 'hebrevc'; insert = '(${1:string str}, ${2:[int max_chars_per_line]})';},
	{display = 'hexdec'; insert = '(${1:string hexadecimal_number})';},
	{display = 'highlight_file'; insert = '(${1:string file_name}, ${2:[bool return]})';},
	{display = 'highlight_string'; insert = '(${1:string string}, ${2:[bool return]})';},
	{display = 'html_entity_decode'; insert = '(${1:string string}, ${2:[int quote_style]}, ${3:[string charset]})';},
	{display = 'htmlentities'; insert = '(${1:string string}, ${2:[int quote_style}, ${3:[string charset}, ${4:[bool double_encode]]]})';},
	{display = 'htmlspecialchars'; insert = '(${1:string string}, ${2:[int quote_style}, ${3:[string charset}, ${4:[bool double_encode]]]})';},
	{display = 'htmlspecialchars_decode'; insert = '(${1:string string}, ${2:[int quote_style]})';},
	{display = 'http_build_query'; insert = '(${1:mixed formdata}, ${2:[string prefix}, ${3:[string arg_separator]]})';},
	{display = 'hypot'; insert = '(${1:float num1}, ${2:float num2})';},
	{display = 'ibase_add_user'; insert = '(${1:resource service_handle}, ${2:string user_name}, ${3:string password}, ${4:[string first_name}, ${5:[string middle_name}, ${6:[string last_name]]]})';},
	{display = 'ibase_affected_rows'; insert = '(${1:[ resource link_identifier ]})';},
	{display = 'ibase_backup'; insert = '(${1:resource service_handle}, ${2:string source_db}, ${3:string dest_file}, ${4:[int options}, ${5:[bool verbose]]})';},
	{display = 'ibase_blob_add'; insert = '(${1:resource blob_handle}, ${2:string data})';},
	{display = 'ibase_blob_cancel'; insert = '(${1:resource blob_handle})';},
	{display = 'ibase_blob_close'; insert = '(${1:resource blob_handle})';},
	{display = 'ibase_blob_create'; insert = '(${1:[resource link_identifier]})';},
	{display = 'ibase_blob_echo'; insert = '(${1:[ resource link_identifier}, ${2:] string blob_id})';},
	{display = 'ibase_blob_get'; insert = '(${1:resource blob_handle}, ${2:int len})';},
	{display = 'ibase_blob_import'; insert = '(${1:[ resource link_identifier}, ${2:] resource file})';},
	{display = 'ibase_blob_info'; insert = '(${1:[ resource link_identifier}, ${2:] string blob_id})';},
	{display = 'ibase_blob_open'; insert = '(${1:[ resource link_identifier}, ${2:] string blob_id})';},
	{display = 'ibase_close'; insert = '(${1:[resource link_identifier]})';},
	{display = 'ibase_commit'; insert = '(${1:resource link_identifier})';},
	{display = 'ibase_commit_ret'; insert = '(${1:resource link_identifier})';},
	{display = 'ibase_connect'; insert = '(${1:string database}, ${2:[string username}, ${3:[string password}, ${4:[string charset}, ${5:[int buffers}, ${6:[int dialect}, ${7:[string role]]]]]]})';},
	{display = 'ibase_db_info'; insert = '(${1:resource service_handle}, ${2:string db}, ${3:int action}, ${4:[int argument]})';},
	{display = 'ibase_delete_user'; insert = '(${1:resource service_handle}, ${2:string user_name}, ${3:string password}, ${4:[string first_name}, ${5:[string middle_name}, ${6:[string last_name]]]})';},
	{display = 'ibase_drop_db'; insert = '(${1:[resource link_identifier]})';},
	{display = 'ibase_errcode'; insert = '(${1:void})';},
	{display = 'ibase_errmsg'; insert = '(${1:void})';},
	{display = 'ibase_execute'; insert = '(${1:resource query}, ${2:[mixed bind_arg}, ${3:[mixed bind_arg}, ${4:[...]]]})';},
	{display = 'ibase_fetch_assoc'; insert = '(${1:resource result}, ${2:[int fetch_flags]})';},
	{display = 'ibase_fetch_object'; insert = '(${1:resource result}, ${2:[int fetch_flags]})';},
	{display = 'ibase_fetch_row'; insert = '(${1:resource result}, ${2:[int fetch_flags]})';},
	{display = 'ibase_field_info'; insert = '(${1:resource query_result}, ${2:int field_number})';},
	{display = 'ibase_free_event_handler'; insert = '(${1:resource event})';},
	{display = 'ibase_free_query'; insert = '(${1:resource query})';},
	{display = 'ibase_free_result'; insert = '(${1:resource result})';},
	{display = 'ibase_gen_id'; insert = '(${1:string generator}, ${2:[int increment}, ${3:[resource link_identifier ]]})';},
	{display = 'ibase_maintain_db'; insert = '(${1:resource service_handle}, ${2:string db}, ${3:int action}, ${4:[int argument]})';},
	{display = 'ibase_modify_user'; insert = '(${1:resource service_handle}, ${2:string user_name}, ${3:string password}, ${4:[string first_name}, ${5:[string middle_name}, ${6:[string last_name]]]})';},
	{display = 'ibase_name_result'; insert = '(${1:resource result}, ${2:string name})';},
	{display = 'ibase_num_fields'; insert = '(${1:resource query_result})';},
	{display = 'ibase_num_params'; insert = '(${1:resource query})';},
	{display = 'ibase_num_rows'; insert = '(${1:resource result_identifier})';},
	{display = 'ibase_param_info'; insert = '(${1:resource query}, ${2:int field_number})';},
	{display = 'ibase_pconnect'; insert = '(${1:string database}, ${2:[string username}, ${3:[string password}, ${4:[string charset}, ${5:[int buffers}, ${6:[int dialect}, ${7:[string role]]]]]]})';},
	{display = 'ibase_prepare'; insert = '(${1:resource link_identifier}, ${2:[string query}, ${3:[resource trans_identifier ]]})';},
	{display = 'ibase_query'; insert = '(${1:[resource link_identifier}, ${2:[ resource link_identifier}, ${3:]] string query}, ${4:[mixed bind_arg}, ${5:[mixed bind_arg}, ${6:[...]]]})';},
	{display = 'ibase_restore'; insert = '(${1:resource service_handle}, ${2:string source_file}, ${3:string dest_db}, ${4:[int options}, ${5:[bool verbose]]})';},
	{display = 'ibase_rollback'; insert = '(${1:resource link_identifier})';},
	{display = 'ibase_rollback_ret'; insert = '(${1:resource link_identifier})';},
	{display = 'ibase_server_info'; insert = '(${1:resource service_handle}, ${2:int action})';},
	{display = 'ibase_service_attach'; insert = '(${1:string host}, ${2:string dba_username}, ${3:string dba_password})';},
	{display = 'ibase_service_detach'; insert = '(${1:resource service_handle})';},
	{display = 'ibase_set_event_handler'; insert = '(${1:[resource link_identifier}, ${2:] callback handler}, ${3:string event}, ${4:[string event}, ${5:[...]]})';},
	{display = 'ibase_trans'; insert = '(${1:[int trans_args}, ${2:[resource link_identifier}, ${3:[... ]}, ${4:int trans_args}, ${5:[resource link_identifier}, ${6:[... ]]}, ${7:[...]]]})';},
	{display = 'ibase_wait_event'; insert = '(${1:[resource link_identifier}, ${2:] string event}, ${3:[string event}, ${4:[...]]})';},
	{display = 'iconv'; insert = '(${1:string in_charset}, ${2:string out_charset}, ${3:string str})';},
	{display = 'iconv_get_encoding'; insert = '(${1:[string type]})';},
	{display = 'iconv_mime_decode'; insert = '(${1:string encoded_string}, ${2:[int mode}, ${3:string charset]})';},
	{display = 'iconv_mime_decode_headers'; insert = '(${1:string headers}, ${2:[int mode}, ${3:string charset]})';},
	{display = 'iconv_mime_encode'; insert = '(${1:string field_name}, ${2:string field_value}, ${3:[array preference]})';},
	{display = 'iconv_set_encoding'; insert = '(${1:string type}, ${2:string charset})';},
	{display = 'iconv_strlen'; insert = '(${1:string str}, ${2:[string charset]})';},
	{display = 'iconv_strpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[string charset]]})';},
	{display = 'iconv_strrpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[string charset]})';},
	{display = 'iconv_substr'; insert = '(${1:string str}, ${2:int offset}, ${3:[int length}, ${4:string charset]})';},
	{display = 'idate'; insert = '(${1:string format}, ${2:[int timestamp]})';},
	{display = 'idn_to_ascii'; insert = '(${1:string domain}, ${2:[int options]})';},
	{display = 'idn_to_utf8'; insert = '(${1:string domain}, ${2:[int options]})';},
	{display = 'ignore_user_abort'; insert = '(${1:[string value]})';},
	{display = 'image2wbmp'; insert = '(${1:resource im}, ${2:[string filename}, ${3:[int threshold]]})';},
	{display = 'image_type_to_extension'; insert = '(${1:int imagetype}, ${2:[bool include_dot]})';},
	{display = 'image_type_to_mime_type'; insert = '(${1:int imagetype})';},
	{display = 'imagealphablending'; insert = '(${1:resource im}, ${2:bool on})';},
	{display = 'imageantialias'; insert = '(${1:resource im}, ${2:bool on})';},
	{display = 'imagearc'; insert = '(${1:resource im}, ${2:int cx}, ${3:int cy}, ${4:int w}, ${5:int h}, ${6:int s}, ${7:int e}, ${8:int col})';},
	{display = 'imagechar'; insert = '(${1:resource im}, ${2:int font}, ${3:int x}, ${4:int y}, ${5:string c}, ${6:int col})';},
	{display = 'imagecharup'; insert = '(${1:resource im}, ${2:int font}, ${3:int x}, ${4:int y}, ${5:string c}, ${6:int col})';},
	{display = 'imagecolorallocate'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue})';},
	{display = 'imagecolorallocatealpha'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})';},
	{display = 'imagecolorat'; insert = '(${1:resource im}, ${2:int x}, ${3:int y})';},
	{display = 'imagecolorclosest'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue})';},
	{display = 'imagecolorclosestalpha'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})';},
	{display = 'imagecolorclosesthwb'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue})';},
	{display = 'imagecolordeallocate'; insert = '(${1:resource im}, ${2:int index})';},
	{display = 'imagecolorexact'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue})';},
	{display = 'imagecolorexactalpha'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})';},
	{display = 'imagecolormatch'; insert = '(${1:resource im1}, ${2:resource im2})';},
	{display = 'imagecolorresolve'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue})';},
	{display = 'imagecolorresolvealpha'; insert = '(${1:resource im}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha})';},
	{display = 'imagecolorset'; insert = '(${1:resource im}, ${2:int col}, ${3:int red}, ${4:int green}, ${5:int blue})';},
	{display = 'imagecolorsforindex'; insert = '(${1:resource im}, ${2:int col})';},
	{display = 'imagecolorstotal'; insert = '(${1:resource im})';},
	{display = 'imagecolortransparent'; insert = '(${1:resource im}, ${2:[int col]})';},
	{display = 'imageconvolution'; insert = '(${1:resource src_im}, ${2:array matrix3x3}, ${3:double div}, ${4:double offset})';},
	{display = 'imagecopy'; insert = '(${1:resource dst_im}, ${2:resource src_im}, ${3:int dst_x}, ${4:int dst_y}, ${5:int src_x}, ${6:int src_y}, ${7:int src_w}, ${8:int src_h})';},
	{display = 'imagecopymerge'; insert = '(${1:resource src_im}, ${2:resource dst_im}, ${3:int dst_x}, ${4:int dst_y}, ${5:int src_x}, ${6:int src_y}, ${7:int src_w}, ${8:int src_h}, ${9:int pct})';},
	{display = 'imagecopymergegray'; insert = '(${1:resource src_im}, ${2:resource dst_im}, ${3:int dst_x}, ${4:int dst_y}, ${5:int src_x}, ${6:int src_y}, ${7:int src_w}, ${8:int src_h}, ${9:int pct})';},
	{display = 'imagecopyresampled'; insert = '(${1:resource dst_im}, ${2:resource src_im}, ${3:int dst_x}, ${4:int dst_y}, ${5:int src_x}, ${6:int src_y}, ${7:int dst_w}, ${8:int dst_h}, ${9:int src_w}, ${10:int src_h})';},
	{display = 'imagecopyresized'; insert = '(${1:resource dst_im}, ${2:resource src_im}, ${3:int dst_x}, ${4:int dst_y}, ${5:int src_x}, ${6:int src_y}, ${7:int dst_w}, ${8:int dst_h}, ${9:int src_w}, ${10:int src_h})';},
	{display = 'imagecreate'; insert = '(${1:int x_size}, ${2:int y_size})';},
	{display = 'imagecreatefromgd'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromgd2'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromgd2part'; insert = '(${1:string filename}, ${2:int srcX}, ${3:int srcY}, ${4:int width}, ${5:int height})';},
	{display = 'imagecreatefromgif'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromjpeg'; insert = '(${1:string filename})';},
	{display = 'imagecreatefrompng'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromstring'; insert = '(${1:string image})';},
	{display = 'imagecreatefromwbmp'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromxbm'; insert = '(${1:string filename})';},
	{display = 'imagecreatefromxpm'; insert = '(${1:string filename})';},
	{display = 'imagecreatetruecolor'; insert = '(${1:int x_size}, ${2:int y_size})';},
	{display = 'imagedashedline'; insert = '(${1:resource im}, ${2:int x1}, ${3:int y1}, ${4:int x2}, ${5:int y2}, ${6:int col})';},
	{display = 'imagedestroy'; insert = '(${1:resource im})';},
	{display = 'imageellipse'; insert = '(${1:resource im}, ${2:int cx}, ${3:int cy}, ${4:int w}, ${5:int h}, ${6:int color})';},
	{display = 'imagefill'; insert = '(${1:resource im}, ${2:int x}, ${3:int y}, ${4:int col})';},
	{display = 'imagefilledarc'; insert = '(${1:resource im}, ${2:int cx}, ${3:int cy}, ${4:int w}, ${5:int h}, ${6:int s}, ${7:int e}, ${8:int col}, ${9:int style})';},
	{display = 'imagefilledellipse'; insert = '(${1:resource im}, ${2:int cx}, ${3:int cy}, ${4:int w}, ${5:int h}, ${6:int color})';},
	{display = 'imagefilledpolygon'; insert = '(${1:resource im}, ${2:array point}, ${3:int num_points}, ${4:int col})';},
	{display = 'imagefilledrectangle'; insert = '(${1:resource im}, ${2:int x1}, ${3:int y1}, ${4:int x2}, ${5:int y2}, ${6:int col})';},
	{display = 'imagefilltoborder'; insert = '(${1:resource im}, ${2:int x}, ${3:int y}, ${4:int border}, ${5:int col})';},
	{display = 'imagefilter'; insert = '(${1:resource src_im}, ${2:int filtertype}, ${3:[args]})';},
	{display = 'imagefontheight'; insert = '(${1:int font})';},
	{display = 'imagefontwidth'; insert = '(${1:int font})';},
	{display = 'imageftbbox'; insert = '(${1:float size}, ${2:float angle}, ${3:string font_file}, ${4:string text}, ${5:[array extrainfo]})';},
	{display = 'imagefttext'; insert = '(${1:resource im}, ${2:float size}, ${3:float angle}, ${4:int x}, ${5:int y}, ${6:int col}, ${7:string font_file}, ${8:string text}, ${9:[array extrainfo]})';},
	{display = 'imagegammacorrect'; insert = '(${1:resource im}, ${2:float inputgamma}, ${3:float outputgamma})';},
	{display = 'imagegd'; insert = '(${1:resource im}, ${2:[string filename]})';},
	{display = 'imagegd2'; insert = '(${1:resource im}, ${2:[string filename}, ${3:}, ${4:[int chunk_size}, ${5:}, ${6:[int type]]]})';},
	{display = 'imagegif'; insert = '(${1:resource im}, ${2:[string filename]})';},
	{display = 'imagegrabscreen'; insert = '()';},
	{display = 'imagegrabwindow'; insert = '(${1:int window_handle}, ${2:[int client_area]})';},
	{display = 'imageinterlace'; insert = '(${1:resource im}, ${2:[int interlace]})';},
	{display = 'imageistruecolor'; insert = '(${1:resource im})';},
	{display = 'imagejpeg'; insert = '(${1:resource im}, ${2:[string filename}, ${3:[int quality]]})';},
	{display = 'imagelayereffect'; insert = '(${1:resource im}, ${2:int effect})';},
	{display = 'imageline'; insert = '(${1:resource im}, ${2:int x1}, ${3:int y1}, ${4:int x2}, ${5:int y2}, ${6:int col})';},
	{display = 'imageloadfont'; insert = '(${1:string filename})';},
	{display = 'imagepalettecopy'; insert = '(${1:resource dst}, ${2:resource src})';},
	{display = 'imagepng'; insert = '(${1:resource im}, ${2:[string filename]})';},
	{display = 'imagepolygon'; insert = '(${1:resource im}, ${2:array point}, ${3:int num_points}, ${4:int col})';},
	{display = 'imagepsbbox'; insert = '(${1:string text}, ${2:resource font}, ${3:int size}, ${4:[int space}, ${5:int tightness}, ${6:float angle]})';},
	{display = 'imagepscopyfont'; insert = '(${1:int font_index})';},
	{display = 'imagepsencodefont'; insert = '(${1:resource font_index}, ${2:string filename})';},
	{display = 'imagepsextendfont'; insert = '(${1:resource font_index}, ${2:float extend})';},
	{display = 'imagepsfreefont'; insert = '(${1:resource font_index})';},
	{display = 'imagepsloadfont'; insert = '(${1:string pathname})';},
	{display = 'imagepsslantfont'; insert = '(${1:resource font_index}, ${2:float slant})';},
	{display = 'imagepstext'; insert = '(${1:resource image}, ${2:string text}, ${3:resource font}, ${4:int size}, ${5:int foreground}, ${6:int background}, ${7:int xcoord}, ${8:int ycoord}, ${9:[int space}, ${10:[int tightness}, ${11:[float angle}, ${12:[int antialias]})';},
	{display = 'imagerectangle'; insert = '(${1:resource im}, ${2:int x1}, ${3:int y1}, ${4:int x2}, ${5:int y2}, ${6:int col})';},
	{display = 'imagerotate'; insert = '(${1:resource src_im}, ${2:float angle}, ${3:int bgdcolor}, ${4:[int ignoretransparent]})';},
	{display = 'imagesavealpha'; insert = '(${1:resource im}, ${2:bool on})';},
	{display = 'imagesetbrush'; insert = '(${1:resource image}, ${2:resource brush})';},
	{display = 'imagesetpixel'; insert = '(${1:resource im}, ${2:int x}, ${3:int y}, ${4:int col})';},
	{display = 'imagesetstyle'; insert = '(${1:resource im}, ${2:array styles})';},
	{display = 'imagesetthickness'; insert = '(${1:resource im}, ${2:int thickness})';},
	{display = 'imagesettile'; insert = '(${1:resource image}, ${2:resource tile})';},
	{display = 'imagestring'; insert = '(${1:resource im}, ${2:int font}, ${3:int x}, ${4:int y}, ${5:string str}, ${6:int col})';},
	{display = 'imagestringup'; insert = '(${1:resource im}, ${2:int font}, ${3:int x}, ${4:int y}, ${5:string str}, ${6:int col})';},
	{display = 'imagesx'; insert = '(${1:resource im})';},
	{display = 'imagesy'; insert = '(${1:resource im})';},
	{display = 'imagetruecolortopalette'; insert = '(${1:resource im}, ${2:bool ditherFlag}, ${3:int colorsWanted})';},
	{display = 'imagettfbbox'; insert = '(${1:float size}, ${2:float angle}, ${3:string font_file}, ${4:string text})';},
	{display = 'imagettftext'; insert = '(${1:resource im}, ${2:float size}, ${3:float angle}, ${4:int x}, ${5:int y}, ${6:int col}, ${7:string font_file}, ${8:string text})';},
	{display = 'imagetypes'; insert = '(${1:void})';},
	{display = 'imagewbmp'; insert = '(${1:resource im}, ${2:[string filename}, ${3:}, ${4:[int foreground]]})';},
	{display = 'imagexbm'; insert = '(${1:int im}, ${2:string filename}, ${3:[int foreground]})';},
	{display = 'imap_8bit'; insert = '(${1:string text})';},
	{display = 'imap_alerts'; insert = '(${1:void})';},
	{display = 'imap_append'; insert = '(${1:resource stream_id}, ${2:string folder}, ${3:string message}, ${4:[string options}, ${5:[string internal_date]]})';},
	{display = 'imap_base64'; insert = '(${1:string text})';},
	{display = 'imap_binary'; insert = '(${1:string text})';},
	{display = 'imap_body'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int options]})';},
	{display = 'imap_bodystruct'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:string section})';},
	{display = 'imap_check'; insert = '(${1:resource stream_id})';},
	{display = 'imap_clearflag_full'; insert = '(${1:resource stream_id}, ${2:string sequence}, ${3:string flag}, ${4:[int options]})';},
	{display = 'imap_close'; insert = '(${1:resource stream_id}, ${2:[int options]})';},
	{display = 'imap_createmailbox'; insert = '(${1:resource stream_id}, ${2:string mailbox})';},
	{display = 'imap_delete'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int options]})';},
	{display = 'imap_deletemailbox'; insert = '(${1:resource stream_id}, ${2:string mailbox})';},
	{display = 'imap_errors'; insert = '(${1:void})';},
	{display = 'imap_expunge'; insert = '(${1:resource stream_id})';},
	{display = 'imap_fetch_overview'; insert = '(${1:resource stream_id}, ${2:string sequence}, ${3:[int options]})';},
	{display = 'imap_fetchbody'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:string section}, ${4:[int options]})';},
	{display = 'imap_fetchheader'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int options]})';},
	{display = 'imap_fetchstructure'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int options]})';},
	{display = 'imap_gc'; insert = '(${1:resource stream_id}, ${2:int flags})';},
	{display = 'imap_get_quota'; insert = '(${1:resource stream_id}, ${2:string qroot})';},
	{display = 'imap_get_quotaroot'; insert = '(${1:resource stream_id}, ${2:string mbox})';},
	{display = 'imap_getacl'; insert = '(${1:resource stream_id}, ${2:string mailbox})';},
	{display = 'imap_getmailboxes'; insert = '(${1:resource stream_id}, ${2:string ref}, ${3:string pattern})';},
	{display = 'imap_getsubscribed'; insert = '(${1:resource stream_id}, ${2:string ref}, ${3:string pattern})';},
	{display = 'imap_headerinfo'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int from_length}, ${4:[int subject_length}, ${5:[string default_host]]]})';},
	{display = 'imap_headers'; insert = '(${1:resource stream_id})';},
	{display = 'imap_last_error'; insert = '(${1:void})';},
	{display = 'imap_list'; insert = '(${1:resource stream_id}, ${2:string ref}, ${3:string pattern})';},
	{display = 'imap_listscan'; insert = '(${1:resource stream_id}, ${2:string ref}, ${3:string pattern}, ${4:string content})';},
	{display = 'imap_lsub'; insert = '(${1:resource stream_id}, ${2:string ref}, ${3:string pattern})';},
	{display = 'imap_mail'; insert = '(${1:string to}, ${2:string subject}, ${3:string message}, ${4:[string additional_headers}, ${5:[string cc}, ${6:[string bcc}, ${7:[string rpath]]]]})';},
	{display = 'imap_mail_compose'; insert = '(${1:array envelope}, ${2:array body})';},
	{display = 'imap_mail_copy'; insert = '(${1:resource stream_id}, ${2:string msglist}, ${3:string mailbox}, ${4:[int options]})';},
	{display = 'imap_mail_move'; insert = '(${1:resource stream_id}, ${2:string sequence}, ${3:string mailbox}, ${4:[int options]})';},
	{display = 'imap_mailboxmsginfo'; insert = '(${1:resource stream_id})';},
	{display = 'imap_mime_header_decode'; insert = '(${1:string str})';},
	{display = 'imap_msgno'; insert = '(${1:resource stream_id}, ${2:int unique_msg_id})';},
	{display = 'imap_mutf7_to_utf8'; insert = '(${1:string in})';},
	{display = 'imap_num_msg'; insert = '(${1:resource stream_id})';},
	{display = 'imap_num_recent'; insert = '(${1:resource stream_id})';},
	{display = 'imap_open'; insert = '(${1:string mailbox}, ${2:string user}, ${3:string password}, ${4:[int options}, ${5:[int n_retries]]})';},
	{display = 'imap_ping'; insert = '(${1:resource stream_id})';},
	{display = 'imap_qprint'; insert = '(${1:string text})';},
	{display = 'imap_renamemailbox'; insert = '(${1:resource stream_id}, ${2:string old_name}, ${3:string new_name})';},
	{display = 'imap_reopen'; insert = '(${1:resource stream_id}, ${2:string mailbox}, ${3:[int options}, ${4:[int n_retries]]})';},
	{display = 'imap_rfc822_parse_adrlist'; insert = '(${1:string address_string}, ${2:string default_host})';},
	{display = 'imap_rfc822_parse_headers'; insert = '(${1:string headers}, ${2:[string default_host]})';},
	{display = 'imap_rfc822_write_address'; insert = '(${1:string mailbox}, ${2:string host}, ${3:string personal})';},
	{display = 'imap_savebody'; insert = '(${1:resource stream_id}, ${2:string|resource file}, ${3:int msg_no}, ${4:[string section = ""}, ${5:[int options = 0]]})';},
	{display = 'imap_search'; insert = '(${1:resource stream_id}, ${2:string criteria}, ${3:[int options}, ${4:[string charset]]})';},
	{display = 'imap_set_quota'; insert = '(${1:resource stream_id}, ${2:string qroot}, ${3:int mailbox_size})';},
	{display = 'imap_setacl'; insert = '(${1:resource stream_id}, ${2:string mailbox}, ${3:string id}, ${4:string rights})';},
	{display = 'imap_setflag_full'; insert = '(${1:resource stream_id}, ${2:string sequence}, ${3:string flag}, ${4:[int options]})';},
	{display = 'imap_sort'; insert = '(${1:resource stream_id}, ${2:int criteria}, ${3:int reverse}, ${4:[int options}, ${5:[string search_criteria}, ${6:[string charset]]]})';},
	{display = 'imap_status'; insert = '(${1:resource stream_id}, ${2:string mailbox}, ${3:int options})';},
	{display = 'imap_subscribe'; insert = '(${1:resource stream_id}, ${2:string mailbox})';},
	{display = 'imap_thread'; insert = '(${1:resource stream_id}, ${2:[int options]})';},
	{display = 'imap_timeout'; insert = '(${1:int timeout_type}, ${2:[int timeout]})';},
	{display = 'imap_uid'; insert = '(${1:resource stream_id}, ${2:int msg_no})';},
	{display = 'imap_undelete'; insert = '(${1:resource stream_id}, ${2:int msg_no}, ${3:[int flags]})';},
	{display = 'imap_unsubscribe'; insert = '(${1:resource stream_id}, ${2:string mailbox})';},
	{display = 'imap_utf7_decode'; insert = '(${1:string buf})';},
	{display = 'imap_utf7_encode'; insert = '(${1:string buf})';},
	{display = 'imap_utf8'; insert = '(${1:string mime_encoded_text})';},
	{display = 'imap_utf8_to_mutf7'; insert = '(${1:string in})';},
	{display = 'implode'; insert = '(${1:[string glue}, ${2:] array pieces})';},
	{display = 'import_request_variables'; insert = '(${1:string types}, ${2:[string prefix]})';},
	{display = 'in_array'; insert = '(${1:mixed needle}, ${2:array haystack}, ${3:[bool strict]})';},
	{display = 'include'; insert = '(${1:string path})';},
	{display = 'include_once'; insert = '(${1:string path})';},
	{display = 'inet_ntop'; insert = '(${1:string in_addr})';},
	{display = 'inet_pton'; insert = '(${1:string ip_address})';},
	{display = 'ini_get'; insert = '(${1:string varname})';},
	{display = 'ini_get_all'; insert = '(${1:[string extension}, ${2:[bool details = true]]})';},
	{display = 'ini_restore'; insert = '(${1:string varname})';},
	{display = 'ini_set'; insert = '(${1:string varname}, ${2:string newvalue})';},
	{display = 'interface_exists'; insert = '(${1:string classname}, ${2:[bool autoload]})';},
	{display = 'intl_error_name'; insert = '()';},
	{display = 'intl_get_error_code'; insert = '()';},
	{display = 'intl_get_error_message'; insert = '()';},
	{display = 'intl_is_failure'; insert = '()';},
	{display = 'intval'; insert = '(${1:mixed var}, ${2:[int base]})';},
	{display = 'ip2long'; insert = '(${1:string ip_address})';},
	{display = 'iptcembed'; insert = '(${1:string iptcdata}, ${2:string jpeg_file_name}, ${3:[int spool]})';},
	{display = 'iptcparse'; insert = '(${1:string iptcdata})';},
	{display = 'is_a'; insert = '(${1:object object}, ${2:string class_name})';},
	{display = 'is_array'; insert = '(${1:mixed var})';},
	{display = 'is_bool'; insert = '(${1:mixed var})';},
	{display = 'is_callable'; insert = '(${1:mixed var}, ${2:[bool syntax_only}, ${3:[string callable_name]]})';},
	{display = 'is_dir'; insert = '(${1:string filename})';},
	{display = 'is_executable'; insert = '(${1:string filename})';},
	{display = 'is_file'; insert = '(${1:string filename})';},
	{display = 'is_finite'; insert = '(${1:float val})';},
	{display = 'is_float'; insert = '(${1:mixed var})';},
	{display = 'is_infinite'; insert = '(${1:float val})';},
	{display = 'is_link'; insert = '(${1:string filename})';},
	{display = 'is_long'; insert = '(${1:mixed var})';},
	{display = 'is_nan'; insert = '(${1:float val})';},
	{display = 'is_null'; insert = '(${1:mixed var})';},
	{display = 'is_numeric'; insert = '(${1:mixed value})';},
	{display = 'is_object'; insert = '(${1:mixed var})';},
	{display = 'is_readable'; insert = '(${1:string filename})';},
	{display = 'is_resource'; insert = '(${1:mixed var})';},
	{display = 'is_scalar'; insert = '(${1:mixed value})';},
	{display = 'is_string'; insert = '(${1:mixed var})';},
	{display = 'is_subclass_of'; insert = '(${1:object object}, ${2:string class_name})';},
	{display = 'is_uploaded_file'; insert = '(${1:string path})';},
	{display = 'is_writable'; insert = '(${1:string filename})';},
	{display = 'isset'; insert = '(${1:mixed var}, ${2:[mixed var]})';},
	{display = 'iterator_apply'; insert = '(${1:Traversable it}, ${2:mixed function}, ${3:[mixed params]})';},
	{display = 'iterator_count'; insert = '(${1:Traversable it})';},
	{display = 'iterator_to_array'; insert = '(${1:Traversable it}, ${2:[bool use_keys = true]})';},
	{display = 'jddayofweek'; insert = '(${1:int juliandaycount}, ${2:[int mode]})';},
	{display = 'jdmonthname'; insert = '(${1:int juliandaycount}, ${2:int mode})';},
	{display = 'jdtofrench'; insert = '(${1:int juliandaycount})';},
	{display = 'jdtogregorian'; insert = '(${1:int juliandaycount})';},
	{display = 'jdtojewish'; insert = '(${1:int juliandaycount}, ${2:[bool hebrew}, ${3:[int fl]]})';},
	{display = 'jdtojulian'; insert = '(${1:int juliandaycount})';},
	{display = 'jdtounix'; insert = '(${1:int jday})';},
	{display = 'jewishtojd'; insert = '(${1:int month}, ${2:int day}, ${3:int year})';},
	{display = 'join'; insert = '(${1:array src}, ${2:string glue})';},
	{display = 'jpeg2wbmp'; insert = '(${1:string f_org}, ${2:string f_dest}, ${3:int d_height}, ${4:int d_width}, ${5:int threshold})';},
	{display = 'json_decode'; insert = '(${1:string json}, ${2:[bool assoc}, ${3:[long depth]]})';},
	{display = 'json_encode'; insert = '(${1:mixed data}, ${2:[int options]})';},
	{display = 'json_last_error'; insert = '()';},
	{display = 'juliantojd'; insert = '(${1:int month}, ${2:int day}, ${3:int year})';},
	{display = 'key'; insert = '(${1:array array_arg})';},
	{display = 'krsort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'ksort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'lcfirst'; insert = '(${1:string str})';},
	{display = 'lcg_value'; insert = '()';},
	{display = 'lchgrp'; insert = '(${1:string filename}, ${2:mixed group})';},
	{display = 'ldap_8859_to_t61'; insert = '(${1:string value})';},
	{display = 'ldap_add'; insert = '(${1:resource link}, ${2:string dn}, ${3:array entry})';},
	{display = 'ldap_bind'; insert = '(${1:resource link}, ${2:[string dn}, ${3:[string password]]})';},
	{display = 'ldap_compare'; insert = '(${1:resource link}, ${2:string dn}, ${3:string attr}, ${4:string value})';},
	{display = 'ldap_connect'; insert = '(${1:[string host}, ${2:[int port}, ${3:[string wallet}, ${4:[string wallet_passwd}, ${5:[int authmode]]]]]})';},
	{display = 'ldap_count_entries'; insert = '(${1:resource link}, ${2:resource result})';},
	{display = 'ldap_delete'; insert = '(${1:resource link}, ${2:string dn})';},
	{display = 'ldap_dn2ufn'; insert = '(${1:string dn})';},
	{display = 'ldap_err2str'; insert = '(${1:int errno})';},
	{display = 'ldap_errno'; insert = '(${1:resource link})';},
	{display = 'ldap_error'; insert = '(${1:resource link})';},
	{display = 'ldap_explode_dn'; insert = '(${1:string dn}, ${2:int with_attrib})';},
	{display = 'ldap_first_attribute'; insert = '(${1:resource link}, ${2:resource result_entry})';},
	{display = 'ldap_first_entry'; insert = '(${1:resource link}, ${2:resource result})';},
	{display = 'ldap_first_reference'; insert = '(${1:resource link}, ${2:resource result})';},
	{display = 'ldap_free_result'; insert = '(${1:resource result})';},
	{display = 'ldap_get_attributes'; insert = '(${1:resource link}, ${2:resource result_entry})';},
	{display = 'ldap_get_dn'; insert = '(${1:resource link}, ${2:resource result_entry})';},
	{display = 'ldap_get_entries'; insert = '(${1:resource link}, ${2:resource result})';},
	{display = 'ldap_get_option'; insert = '(${1:resource link}, ${2:int option}, ${3:mixed retval})';},
	{display = 'ldap_get_values_len'; insert = '(${1:resource link}, ${2:resource result_entry}, ${3:string attribute})';},
	{display = 'ldap_list'; insert = '(${1:resource|array link}, ${2:string base_dn}, ${3:string filter}, ${4:[array attrs}, ${5:[int attrsonly}, ${6:[int sizelimit}, ${7:[int timelimit}, ${8:[int deref]]]]]})';},
	{display = 'ldap_mod_add'; insert = '(${1:resource link}, ${2:string dn}, ${3:array entry})';},
	{display = 'ldap_mod_del'; insert = '(${1:resource link}, ${2:string dn}, ${3:array entry})';},
	{display = 'ldap_mod_replace'; insert = '(${1:resource link}, ${2:string dn}, ${3:array entry})';},
	{display = 'ldap_next_attribute'; insert = '(${1:resource link}, ${2:resource result_entry})';},
	{display = 'ldap_next_entry'; insert = '(${1:resource link}, ${2:resource result_entry})';},
	{display = 'ldap_next_reference'; insert = '(${1:resource link}, ${2:resource reference_entry})';},
	{display = 'ldap_parse_reference'; insert = '(${1:resource link}, ${2:resource reference_entry}, ${3:array referrals})';},
	{display = 'ldap_parse_result'; insert = '(${1:resource link}, ${2:resource result}, ${3:int errcode}, ${4:string matcheddn}, ${5:string errmsg}, ${6:array referrals})';},
	{display = 'ldap_read'; insert = '(${1:resource|array link}, ${2:string base_dn}, ${3:string filter}, ${4:[array attrs}, ${5:[int attrsonly}, ${6:[int sizelimit}, ${7:[int timelimit}, ${8:[int deref]]]]]})';},
	{display = 'ldap_rename'; insert = '(${1:resource link}, ${2:string dn}, ${3:string newrdn}, ${4:string newparent}, ${5:bool deleteoldrdn})';},
	{display = 'ldap_sasl_bind'; insert = '(${1:resource link}, ${2:[string binddn}, ${3:[string password}, ${4:[string sasl_mech}, ${5:[string sasl_realm}, ${6:[string sasl_authc_id}, ${7:[string sasl_authz_id}, ${8:[string props]]]]]]]})';},
	{display = 'ldap_search'; insert = '(${1:resource|array link}, ${2:string base_dn}, ${3:string filter}, ${4:[array attrs}, ${5:[int attrsonly}, ${6:[int sizelimit}, ${7:[int timelimit}, ${8:[int deref]]]]]})';},
	{display = 'ldap_set_option'; insert = '(${1:resource link}, ${2:int option}, ${3:mixed newval})';},
	{display = 'ldap_set_rebind_proc'; insert = '(${1:resource link}, ${2:string callback})';},
	{display = 'ldap_sort'; insert = '(${1:resource link}, ${2:resource result}, ${3:string sortfilter})';},
	{display = 'ldap_start_tls'; insert = '(${1:resource link})';},
	{display = 'ldap_t61_to_8859'; insert = '(${1:string value})';},
	{display = 'ldap_unbind'; insert = '(${1:resource link})';},
	{display = 'leak'; insert = '(${1:int num_bytes=3})';},
	{display = 'levenshtein'; insert = '(${1:string str1}, ${2:string str2}, ${3:[int cost_ins}, ${4:int cost_rep}, ${5:int cost_del]})';},
	{display = 'libxml_clear_errors'; insert = '()';},
	{display = 'libxml_disable_entity_loader'; insert = '(${1:[boolean disable]})';},
	{display = 'libxml_get_errors'; insert = '()';},
	{display = 'libxml_get_last_error'; insert = '()';},
	{display = 'libxml_set_streams_context'; insert = '(${1:resource streams_context})';},
	{display = 'libxml_use_internal_errors'; insert = '(${1:[boolean use_errors]})';},
	{display = 'link'; insert = '(${1:string target}, ${2:string link})';},
	{display = 'linkinfo'; insert = '(${1:string filename})';},
	{display = 'litespeed_request_headers'; insert = '(${1:void})';},
	{display = 'litespeed_response_headers'; insert = '(${1:void})';},
	{display = 'locale_accept_from_http'; insert = '(${1:string $http_accept})';},
	{display = 'locale_canonicalize'; insert = '(${1:Locale $loc}, ${2:string $locale})';},
	{display = 'locale_filter_matches'; insert = '(${1:string $langtag}, ${2:string $locale}, ${3:[bool $canonicalize]})';},
	{display = 'locale_get_all_variants'; insert = '(${1:$locale})';},
	{display = 'locale_get_default'; insert = '(${1:})';},
	{display = 'locale_get_keywords'; insert = '(${1:string $locale})';},
	{display = 'locale_get_primary_language'; insert = '(${1:$locale})';},
	{display = 'locale_get_region'; insert = '(${1:$locale})';},
	{display = 'locale_get_script'; insert = '(${1:$locale})';},
	{display = 'locale_lookup'; insert = '(${1:array $langtag}, ${2:string $locale}, ${3:[bool $canonicalize}, ${4:[string $default = null]]})';},
	{display = 'locale_set_default'; insert = '(${1:string $locale})';},
	{display = 'localeconv'; insert = '(${1:void})';},
	{display = 'localtime'; insert = '(${1:[int timestamp}, ${2:[bool associative_array]]})';},
	{display = 'log'; insert = '(${1:float number}, ${2:[float base]})';},
	{display = 'log10'; insert = '(${1:float number})';},
	{display = 'log1p'; insert = '(${1:float number})';},
	{display = 'long2ip'; insert = '(${1:int proper_address})';},
	{display = 'lstat'; insert = '(${1:string filename})';},
	{display = 'ltrim'; insert = '(${1:string str}, ${2:[string character_mask]})';},
	{display = 'mail'; insert = '(${1:string to}, ${2:string subject}, ${3:string message}, ${4:[string additional_headers}, ${5:[string additional_parameters]]})';},
	{display = 'max'; insert = '(${1:mixed arg1}, ${2:[mixed arg2}, ${3:[mixed ...]]})';},
	{display = 'mb_check_encoding'; insert = '(${1:[string var}, ${2:[string encoding]]})';},
	{display = 'mb_convert_case'; insert = '(${1:string sourcestring}, ${2:int mode}, ${3:[string encoding]})';},
	{display = 'mb_convert_encoding'; insert = '(${1:string str}, ${2:string to-encoding}, ${3:[mixed from-encoding]})';},
	{display = 'mb_convert_kana'; insert = '(${1:string str}, ${2:[string option]}, ${3:[string encoding]})';},
	{display = 'mb_convert_variables'; insert = '(${1:string to-encoding}, ${2:mixed from-encoding}, ${3:mixed vars}, ${4:[...]})';},
	{display = 'mb_decode_mimeheader'; insert = '(${1:string string})';},
	{display = 'mb_decode_numericentity'; insert = '(${1:string string}, ${2:array convmap}, ${3:[string encoding]})';},
	{display = 'mb_detect_encoding'; insert = '(${1:string str}, ${2:[mixed encoding_list}, ${3:[bool strict]]})';},
	{display = 'mb_detect_order'; insert = '(${1:[mixed encoding-list]})';},
	{display = 'mb_encode_mimeheader'; insert = '(${1:string str}, ${2:[string charset}, ${3:[string transfer-encoding}, ${4:[string linefeed}, ${5:[int indent]]]]})';},
	{display = 'mb_encode_numericentity'; insert = '(${1:string string}, ${2:array convmap}, ${3:[string encoding]})';},
	{display = 'mb_encoding_aliases'; insert = '(${1:string encoding})';},
	{display = 'mb_ereg'; insert = '(${1:string pattern}, ${2:string string}, ${3:[array registers]})';},
	{display = 'mb_ereg_match'; insert = '(${1:string pattern}, ${2:string string}, ${3:[string option]})';},
	{display = 'mb_ereg_replace'; insert = '(${1:string pattern}, ${2:string replacement}, ${3:string string}, ${4:[string option]})';},
	{display = 'mb_ereg_search'; insert = '(${1:[string pattern}, ${2:[string option]]})';},
	{display = 'mb_ereg_search_getpos'; insert = '(${1:void})';},
	{display = 'mb_ereg_search_getregs'; insert = '(${1:void})';},
	{display = 'mb_ereg_search_init'; insert = '(${1:string string}, ${2:[string pattern}, ${3:[string option]]})';},
	{display = 'mb_ereg_search_pos'; insert = '(${1:[string pattern}, ${2:[string option]]})';},
	{display = 'mb_ereg_search_regs'; insert = '(${1:[string pattern}, ${2:[string option]]})';},
	{display = 'mb_ereg_search_setpos'; insert = '(${1:int position})';},
	{display = 'mb_eregi'; insert = '(${1:string pattern}, ${2:string string}, ${3:[array registers]})';},
	{display = 'mb_eregi_replace'; insert = '(${1:string pattern}, ${2:string replacement}, ${3:string string})';},
	{display = 'mb_get_info'; insert = '(${1:[string type]})';},
	{display = 'mb_http_input'; insert = '(${1:[string type]})';},
	{display = 'mb_http_output'; insert = '(${1:[string encoding]})';},
	{display = 'mb_internal_encoding'; insert = '(${1:[string encoding]})';},
	{display = 'mb_language'; insert = '(${1:[string language]})';},
	{display = 'mb_list_encodings'; insert = '()';},
	{display = 'mb_output_handler'; insert = '(${1:string contents}, ${2:int status})';},
	{display = 'mb_parse_str'; insert = '(${1:string encoded_string}, ${2:[array result]})';},
	{display = 'mb_preferred_mime_name'; insert = '(${1:string encoding})';},
	{display = 'mb_regex_encoding'; insert = '(${1:[string encoding]})';},
	{display = 'mb_regex_set_options'; insert = '(${1:[string options]})';},
	{display = 'mb_send_mail'; insert = '(${1:string to}, ${2:string subject}, ${3:string message}, ${4:[string additional_headers}, ${5:[string additional_parameters]]})';},
	{display = 'mb_split'; insert = '(${1:string pattern}, ${2:string string}, ${3:[int limit]})';},
	{display = 'mb_strcut'; insert = '(${1:string str}, ${2:int start}, ${3:[int length}, ${4:[string encoding]]})';},
	{display = 'mb_strimwidth'; insert = '(${1:string str}, ${2:int start}, ${3:int width}, ${4:[string trimmarker}, ${5:[string encoding]]})';},
	{display = 'mb_stripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[string encoding]]})';},
	{display = 'mb_stristr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part}, ${4:[string encoding]]})';},
	{display = 'mb_strlen'; insert = '(${1:string str}, ${2:[string encoding]})';},
	{display = 'mb_strpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[string encoding]]})';},
	{display = 'mb_strrchr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part}, ${4:[string encoding]]})';},
	{display = 'mb_strrichr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part}, ${4:[string encoding]]})';},
	{display = 'mb_strripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[string encoding]]})';},
	{display = 'mb_strrpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[string encoding]]})';},
	{display = 'mb_strstr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part}, ${4:[string encoding]]})';},
	{display = 'mb_strtolower'; insert = '(${1:string sourcestring}, ${2:[string encoding]})';},
	{display = 'mb_strtoupper'; insert = '(${1:string sourcestring}, ${2:[string encoding]})';},
	{display = 'mb_strwidth'; insert = '(${1:string str}, ${2:[string encoding]})';},
	{display = 'mb_substitute_character'; insert = '(${1:[mixed substchar]})';},
	{display = 'mb_substr'; insert = '(${1:string str}, ${2:int start}, ${3:[int length}, ${4:[string encoding]]})';},
	{display = 'mb_substr_count'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[string encoding]})';},
	{display = 'mcrypt_cbc'; insert = '(${1:int cipher}, ${2:string key}, ${3:string data}, ${4:int mode}, ${5:string iv})';},
	{display = 'mcrypt_cfb'; insert = '(${1:int cipher}, ${2:string key}, ${3:string data}, ${4:int mode}, ${5:string iv})';},
	{display = 'mcrypt_create_iv'; insert = '(${1:int size}, ${2:int source})';},
	{display = 'mcrypt_decrypt'; insert = '(${1:string cipher}, ${2:string key}, ${3:string data}, ${4:string mode}, ${5:string iv})';},
	{display = 'mcrypt_ecb'; insert = '(${1:int cipher}, ${2:string key}, ${3:string data}, ${4:int mode}, ${5:string iv})';},
	{display = 'mcrypt_enc_get_algorithms_name'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_get_block_size'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_get_iv_size'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_get_key_size'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_get_modes_name'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_get_supported_key_sizes'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_is_block_algorithm'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_is_block_algorithm_mode'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_is_block_mode'; insert = '(${1:resource td})';},
	{display = 'mcrypt_enc_self_test'; insert = '(${1:resource td})';},
	{display = 'mcrypt_encrypt'; insert = '(${1:string cipher}, ${2:string key}, ${3:string data}, ${4:string mode}, ${5:string iv})';},
	{display = 'mcrypt_generic'; insert = '(${1:resource td}, ${2:string data})';},
	{display = 'mcrypt_generic_deinit'; insert = '(${1:resource td})';},
	{display = 'mcrypt_generic_init'; insert = '(${1:resource td}, ${2:string key}, ${3:string iv})';},
	{display = 'mcrypt_get_block_size'; insert = '(${1:string cipher}, ${2:string module})';},
	{display = 'mcrypt_get_cipher_name'; insert = '(${1:string cipher})';},
	{display = 'mcrypt_get_iv_size'; insert = '(${1:string cipher}, ${2:string module})';},
	{display = 'mcrypt_get_key_size'; insert = '(${1:string cipher}, ${2:string module})';},
	{display = 'mcrypt_list_algorithms'; insert = '(${1:[string lib_dir]})';},
	{display = 'mcrypt_list_modes'; insert = '(${1:[string lib_dir]})';},
	{display = 'mcrypt_module_close'; insert = '(${1:resource td})';},
	{display = 'mcrypt_module_get_algo_block_size'; insert = '(${1:string algorithm}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_get_algo_key_size'; insert = '(${1:string algorithm}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_get_supported_key_sizes'; insert = '(${1:string algorithm}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_is_block_algorithm'; insert = '(${1:string algorithm}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_is_block_algorithm_mode'; insert = '(${1:string mode}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_is_block_mode'; insert = '(${1:string mode}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_module_open'; insert = '(${1:string cipher}, ${2:string cipher_directory}, ${3:string mode}, ${4:string mode_directory})';},
	{display = 'mcrypt_module_self_test'; insert = '(${1:string algorithm}, ${2:[string lib_dir]})';},
	{display = 'mcrypt_ofb'; insert = '(${1:int cipher}, ${2:string key}, ${3:string data}, ${4:int mode}, ${5:string iv})';},
	{display = 'md5'; insert = '(${1:string str}, ${2:[ bool raw_output]})';},
	{display = 'md5_file'; insert = '(${1:string filename}, ${2:[bool raw_output]})';},
	{display = 'mdecrypt_generic'; insert = '(${1:resource td}, ${2:string data})';},
	{display = 'memory_get_peak_usage'; insert = '(${1:[real_usage]})';},
	{display = 'memory_get_usage'; insert = '(${1:[real_usage]})';},
	{display = 'metaphone'; insert = '(${1:string text}, ${2:[int phones]})';},
	{display = 'method_exists'; insert = '(${1:object object}, ${2:string method})';},
	{display = 'mhash'; insert = '(${1:int hash}, ${2:string data}, ${3:[string key]})';},
	{display = 'mhash_count'; insert = '(${1:void})';},
	{display = 'mhash_get_block_size'; insert = '(${1:int hash})';},
	{display = 'mhash_get_hash_name'; insert = '(${1:int hash})';},
	{display = 'mhash_keygen_s2k'; insert = '(${1:int hash}, ${2:string input_password}, ${3:string salt}, ${4:int bytes})';},
	{display = 'microtime'; insert = '(${1:[bool get_as_float]})';},
	{display = 'mime_content_type'; insert = '(${1:string filename|resource stream})';},
	{display = 'min'; insert = '(${1:mixed arg1}, ${2:[mixed arg2}, ${3:[mixed ...]]})';},
	{display = 'mkdir'; insert = '(${1:string pathname}, ${2:[int mode}, ${3:[bool recursive}, ${4:[resource context]]]})';},
	{display = 'mktime'; insert = '(${1:[int hour}, ${2:[int min}, ${3:[int sec}, ${4:[int mon}, ${5:[int day}, ${6:[int year]]]]]]})';},
	{display = 'money_format'; insert = '(${1:string format}, ${2:float value})';},
	{display = 'move_uploaded_file'; insert = '(${1:string path}, ${2:string new_path})';},
	{display = 'msg_get_queue'; insert = '(${1:int key}, ${2:[int perms]})';},
	{display = 'msg_queue_exists'; insert = '(${1:int key})';},
	{display = 'msg_receive'; insert = '(${1:resource queue}, ${2:int desiredmsgtype}, ${3:int &msgtype}, ${4:int maxsize}, ${5:mixed message}, ${6:[bool unserialize=true}, ${7:[int flags=0}, ${8:[int errorcode]]]})';},
	{display = 'msg_remove_queue'; insert = '(${1:resource queue})';},
	{display = 'msg_send'; insert = '(${1:resource queue}, ${2:int msgtype}, ${3:mixed message}, ${4:[bool serialize=true}, ${5:[bool blocking=true}, ${6:[int errorcode]]]})';},
	{display = 'msg_set_queue'; insert = '(${1:resource queue}, ${2:array data})';},
	{display = 'msg_stat_queue'; insert = '(${1:resource queue})';},
	{display = 'msgfmt_create'; insert = '(${1:string $locale}, ${2:string $pattern})';},
	{display = 'msgfmt_format'; insert = '(${1:MessageFormatter $nf}, ${2:array $args})';},
	{display = 'msgfmt_format_message'; insert = '(${1:string $locale}, ${2:string $pattern}, ${3:array $args})';},
	{display = 'msgfmt_get_error_code'; insert = '(${1:MessageFormatter $nf})';},
	{display = 'msgfmt_get_error_message'; insert = '(${1:MessageFormatter $coll})';},
	{display = 'msgfmt_get_locale'; insert = '(${1:MessageFormatter $mf})';},
	{display = 'msgfmt_get_pattern'; insert = '(${1:MessageFormatter $mf})';},
	{display = 'msgfmt_parse'; insert = '(${1:MessageFormatter $nf}, ${2:string $source})';},
	{display = 'msgfmt_set_pattern'; insert = '(${1:MessageFormatter $mf}, ${2:string $pattern})';},
	{display = 'mssql_bind'; insert = '(${1:resource stmt}, ${2:string param_name}, ${3:mixed var}, ${4:int type}, ${5:[bool is_output}, ${6:[bool is_null}, ${7:[int maxlen]]]})';},
	{display = 'mssql_close'; insert = '(${1:[resource conn_id]})';},
	{display = 'mssql_connect'; insert = '(${1:[string servername}, ${2:[string username}, ${3:[string password}, ${4:[bool new_link]]]]})';},
	{display = 'mssql_data_seek'; insert = '(${1:resource result_id}, ${2:int offset})';},
	{display = 'mssql_execute'; insert = '(${1:resource stmt}, ${2:[bool skip_results = false]})';},
	{display = 'mssql_fetch_array'; insert = '(${1:resource result_id}, ${2:[int result_type]})';},
	{display = 'mssql_fetch_assoc'; insert = '(${1:resource result_id})';},
	{display = 'mssql_fetch_batch'; insert = '(${1:resource result_index})';},
	{display = 'mssql_fetch_field'; insert = '(${1:resource result_id}, ${2:[int offset]})';},
	{display = 'mssql_fetch_object'; insert = '(${1:resource result_id})';},
	{display = 'mssql_fetch_row'; insert = '(${1:resource result_id})';},
	{display = 'mssql_field_length'; insert = '(${1:resource result_id}, ${2:[int offset]})';},
	{display = 'mssql_field_name'; insert = '(${1:resource result_id}, ${2:[int offset]})';},
	{display = 'mssql_field_seek'; insert = '(${1:resource result_id}, ${2:int offset})';},
	{display = 'mssql_field_type'; insert = '(${1:resource result_id}, ${2:[int offset]})';},
	{display = 'mssql_free_result'; insert = '(${1:resource result_index})';},
	{display = 'mssql_free_statement'; insert = '(${1:resource result_index})';},
	{display = 'mssql_get_last_message'; insert = '(${1:void})';},
	{display = 'mssql_guid_string'; insert = '(${1:string binary}, ${2:[bool short_format]})';},
	{display = 'mssql_init'; insert = '(${1:string sp_name}, ${2:[resource conn_id]})';},
	{display = 'mssql_min_error_severity'; insert = '(${1:int severity})';},
	{display = 'mssql_min_message_severity'; insert = '(${1:int severity})';},
	{display = 'mssql_next_result'; insert = '(${1:resource result_id})';},
	{display = 'mssql_num_fields'; insert = '(${1:resource mssql_result_index})';},
	{display = 'mssql_num_rows'; insert = '(${1:resource mssql_result_index})';},
	{display = 'mssql_pconnect'; insert = '(${1:[string servername}, ${2:[string username}, ${3:[string password}, ${4:[bool new_link]]]]})';},
	{display = 'mssql_query'; insert = '(${1:string query}, ${2:[resource conn_id}, ${3:[int batch_size]]})';},
	{display = 'mssql_result'; insert = '(${1:resource result_id}, ${2:int row}, ${3:mixed field})';},
	{display = 'mssql_rows_affected'; insert = '(${1:resource conn_id})';},
	{display = 'mssql_select_db'; insert = '(${1:string database_name}, ${2:[resource conn_id]})';},
	{display = 'mt_getrandmax'; insert = '(${1:void})';},
	{display = 'mt_rand'; insert = '(${1:[int min}, ${2:int max]})';},
	{display = 'mt_srand'; insert = '(${1:[int seed]})';},
	{display = 'mysql_affected_rows'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_client_encoding'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_close'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_connect'; insert = '(${1:[string hostname[:port][:/path/to/socket]}, ${2:[string username}, ${3:[string password}, ${4:[bool new}, ${5:[int flags]]]]]})';},
	{display = 'mysql_create_db'; insert = '(${1:string database_name}, ${2:[int link_identifier]})';},
	{display = 'mysql_data_seek'; insert = '(${1:resource result}, ${2:int row_number})';},
	{display = 'mysql_db_query'; insert = '(${1:string database_name}, ${2:string query}, ${3:[int link_identifier]})';},
	{display = 'mysql_drop_db'; insert = '(${1:string database_name}, ${2:[int link_identifier]})';},
	{display = 'mysql_errno'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_error'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_escape_string'; insert = '(${1:string to_be_escaped})';},
	{display = 'mysql_fetch_array'; insert = '(${1:resource result}, ${2:[int result_type]})';},
	{display = 'mysql_fetch_assoc'; insert = '(${1:resource result})';},
	{display = 'mysql_fetch_field'; insert = '(${1:resource result}, ${2:[int field_offset]})';},
	{display = 'mysql_fetch_lengths'; insert = '(${1:resource result})';},
	{display = 'mysql_fetch_object'; insert = '(${1:resource result}, ${2:[string class_name}, ${3:[NULL|array ctor_params]]})';},
	{display = 'mysql_fetch_row'; insert = '(${1:resource result})';},
	{display = 'mysql_field_flags'; insert = '(${1:resource result}, ${2:int field_offset})';},
	{display = 'mysql_field_len'; insert = '(${1:resource result}, ${2:int field_offset})';},
	{display = 'mysql_field_name'; insert = '(${1:resource result}, ${2:int field_index})';},
	{display = 'mysql_field_seek'; insert = '(${1:resource result}, ${2:int field_offset})';},
	{display = 'mysql_field_table'; insert = '(${1:resource result}, ${2:int field_offset})';},
	{display = 'mysql_field_type'; insert = '(${1:resource result}, ${2:int field_offset})';},
	{display = 'mysql_free_result'; insert = '(${1:resource result})';},
	{display = 'mysql_get_client_info'; insert = '(${1:void})';},
	{display = 'mysql_get_host_info'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_get_proto_info'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_get_server_info'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_info'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_insert_id'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_list_dbs'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_list_fields'; insert = '(${1:string database_name}, ${2:string table_name}, ${3:[int link_identifier]})';},
	{display = 'mysql_list_processes'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_list_tables'; insert = '(${1:string database_name}, ${2:[int link_identifier]})';},
	{display = 'mysql_num_fields'; insert = '(${1:resource result})';},
	{display = 'mysql_num_rows'; insert = '(${1:resource result})';},
	{display = 'mysql_pconnect'; insert = '(${1:[string hostname[:port][:/path/to/socket]}, ${2:[string username}, ${3:[string password}, ${4:[int flags]]]]})';},
	{display = 'mysql_ping'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_query'; insert = '(${1:string query}, ${2:[int link_identifier]})';},
	{display = 'mysql_real_escape_string'; insert = '(${1:string to_be_escaped}, ${2:[int link_identifier]})';},
	{display = 'mysql_result'; insert = '(${1:resource result}, ${2:int row}, ${3:[mixed field]})';},
	{display = 'mysql_select_db'; insert = '(${1:string database_name}, ${2:[int link_identifier]})';},
	{display = 'mysql_set_charset'; insert = '(${1:string csname}, ${2:[int link_identifier]})';},
	{display = 'mysql_stat'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_thread_id'; insert = '(${1:[int link_identifier]})';},
	{display = 'mysql_unbuffered_query'; insert = '(${1:string query}, ${2:[int link_identifier]})';},
	{display = 'mysqli_affected_rows'; insert = '(${1:object link})';},
	{display = 'mysqli_autocommit'; insert = '(${1:object link}, ${2:bool mode})';},
	{display = 'mysqli_cache_stats'; insert = '(${1:void})';},
	{display = 'mysqli_change_user'; insert = '(${1:object link}, ${2:string user}, ${3:string password}, ${4:string database})';},
	{display = 'mysqli_character_set_name'; insert = '(${1:object link})';},
	{display = 'mysqli_close'; insert = '(${1:object link})';},
	{display = 'mysqli_commit'; insert = '(${1:object link})';},
	{display = 'mysqli_connect'; insert = '(${1:[string hostname}, ${2:[string username}, ${3:[string passwd}, ${4:[string dbname}, ${5:[int port}, ${6:[string socket]]]]]]})';},
	{display = 'mysqli_connect_errno'; insert = '(${1:void})';},
	{display = 'mysqli_connect_error'; insert = '(${1:void})';},
	{display = 'mysqli_data_seek'; insert = '(${1:object result}, ${2:int offset})';},
	{display = 'mysqli_debug'; insert = '(${1:string debug})';},
	{display = 'mysqli_dump_debug_info'; insert = '(${1:object link})';},
	{display = 'mysqli_embedded_server_end'; insert = '(${1:void})';},
	{display = 'mysqli_embedded_server_start'; insert = '(${1:bool start}, ${2:array arguments}, ${3:array groups})';},
	{display = 'mysqli_errno'; insert = '(${1:object link})';},
	{display = 'mysqli_error'; insert = '(${1:object link})';},
	{display = 'mysqli_fetch_all'; insert = '(${1:object result}, ${2:[int resulttype]})';},
	{display = 'mysqli_fetch_array'; insert = '(${1:object result}, ${2:[int resulttype]})';},
	{display = 'mysqli_fetch_assoc'; insert = '(${1:object result})';},
	{display = 'mysqli_fetch_field'; insert = '(${1:object result})';},
	{display = 'mysqli_fetch_field_direct'; insert = '(${1:object result}, ${2:int offset})';},
	{display = 'mysqli_fetch_fields'; insert = '(${1:object result})';},
	{display = 'mysqli_fetch_lengths'; insert = '(${1:object result})';},
	{display = 'mysqli_fetch_object'; insert = '(${1:object result}, ${2:[string class_name}, ${3:[NULL|array ctor_params]]})';},
	{display = 'mysqli_fetch_row'; insert = '(${1:object result})';},
	{display = 'mysqli_field_count'; insert = '(${1:object link})';},
	{display = 'mysqli_field_seek'; insert = '(${1:object result}, ${2:int fieldnr})';},
	{display = 'mysqli_field_tell'; insert = '(${1:object result})';},
	{display = 'mysqli_free_result'; insert = '(${1:object result})';},
	{display = 'mysqli_get_charset'; insert = '(${1:object link})';},
	{display = 'mysqli_get_client_info'; insert = '(${1:void})';},
	{display = 'mysqli_get_client_stats'; insert = '(${1:void})';},
	{display = 'mysqli_get_client_version'; insert = '(${1:void})';},
	{display = 'mysqli_get_connection_stats'; insert = '(${1:void})';},
	{display = 'mysqli_get_host_info'; insert = '(${1:object link})';},
	{display = 'mysqli_get_proto_info'; insert = '(${1:object link})';},
	{display = 'mysqli_get_server_info'; insert = '(${1:object link})';},
	{display = 'mysqli_get_server_version'; insert = '(${1:object link})';},
	{display = 'mysqli_get_warnings'; insert = '(${1:object link})';},
	{display = 'mysqli_info'; insert = '(${1:object link})';},
	{display = 'mysqli_init'; insert = '(${1:void})';},
	{display = 'mysqli_insert_id'; insert = '(${1:object link})';},
	{display = 'mysqli_kill'; insert = '(${1:object link}, ${2:int processid})';},
	{display = 'mysqli_link_construct'; insert = '()';},
	{display = 'mysqli_more_results'; insert = '(${1:object link})';},
	{display = 'mysqli_multi_query'; insert = '(${1:object link}, ${2:string query})';},
	{display = 'mysqli_next_result'; insert = '(${1:object link})';},
	{display = 'mysqli_num_fields'; insert = '(${1:object result})';},
	{display = 'mysqli_num_rows'; insert = '(${1:object result})';},
	{display = 'mysqli_options'; insert = '(${1:object link}, ${2:int flags}, ${3:mixed values})';},
	{display = 'mysqli_ping'; insert = '(${1:object link})';},
	{display = 'mysqli_poll'; insert = '(${1:array read}, ${2:array write}, ${3:array error}, ${4:long sec}, ${5:[long usec]})';},
	{display = 'mysqli_prepare'; insert = '(${1:object link}, ${2:string query})';},
	{display = 'mysqli_query'; insert = '(${1:object link}, ${2:string query}, ${3:[int resultmode]})';},
	{display = 'mysqli_real_connect'; insert = '(${1:object link}, ${2:[string hostname}, ${3:[string username}, ${4:[string passwd}, ${5:[string dbname}, ${6:[int port}, ${7:[string socket}, ${8:[int flags]]]]]]]})';},
	{display = 'mysqli_real_escape_string'; insert = '(${1:object link}, ${2:string escapestr})';},
	{display = 'mysqli_real_query'; insert = '(${1:object link}, ${2:string query})';},
	{display = 'mysqli_reap_async_query'; insert = '(${1:object link})';},
	{display = 'mysqli_refresh'; insert = '(${1:object link}, ${2:long options})';},
	{display = 'mysqli_report'; insert = '(${1:int flags})';},
	{display = 'mysqli_rollback'; insert = '(${1:object link})';},
	{display = 'mysqli_select_db'; insert = '(${1:object link}, ${2:string dbname})';},
	{display = 'mysqli_set_charset'; insert = '(${1:object link}, ${2:string csname})';},
	{display = 'mysqli_set_local_infile_default'; insert = '(${1:object link})';},
	{display = 'mysqli_set_local_infile_handler'; insert = '(${1:object link}, ${2:callback read_func})';},
	{display = 'mysqli_sqlstate'; insert = '(${1:object link})';},
	{display = 'mysqli_ssl_set'; insert = '(${1:object link}, ${2:string key}, ${3:string cert}, ${4:string ca}, ${5:string capath}, ${6:string cipher]})';},
	{display = 'mysqli_stat'; insert = '(${1:object link})';},
	{display = 'mysqli_stmt_affected_rows'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_attr_get'; insert = '(${1:object stmt}, ${2:long attr})';},
	{display = 'mysqli_stmt_attr_set'; insert = '(${1:object stmt}, ${2:long attr}, ${3:long mode})';},
	{display = 'mysqli_stmt_bind_param'; insert = '(${1:object stmt}, ${2:string types}, ${3:mixed variable}, ${4:[mixed}, ${5:....]})';},
	{display = 'mysqli_stmt_bind_result'; insert = '(${1:object stmt}, ${2:mixed var}, ${3:}, ${4:[mixed}, ${5:...]})';},
	{display = 'mysqli_stmt_close'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_data_seek'; insert = '(${1:object stmt}, ${2:int offset})';},
	{display = 'mysqli_stmt_errno'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_error'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_execute'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_fetch'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_field_count'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_free_result'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_get_result'; insert = '(${1:object link})';},
	{display = 'mysqli_stmt_get_warnings'; insert = '(${1:object link})';},
	{display = 'mysqli_stmt_init'; insert = '(${1:object link})';},
	{display = 'mysqli_stmt_insert_id'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_next_result'; insert = '(${1:object link})';},
	{display = 'mysqli_stmt_num_rows'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_param_count'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_prepare'; insert = '(${1:object stmt}, ${2:string query})';},
	{display = 'mysqli_stmt_reset'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_result_metadata'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_send_long_data'; insert = '(${1:object stmt}, ${2:int param_nr}, ${3:string data})';},
	{display = 'mysqli_stmt_sqlstate'; insert = '(${1:object stmt})';},
	{display = 'mysqli_stmt_store_result'; insert = '(${1:stmt})';},
	{display = 'mysqli_store_result'; insert = '(${1:object link})';},
	{display = 'mysqli_thread_id'; insert = '(${1:object link})';},
	{display = 'mysqli_thread_safe'; insert = '(${1:void})';},
	{display = 'mysqli_use_result'; insert = '(${1:object link})';},
	{display = 'mysqli_warning_count'; insert = '(${1:object link})';},
	{display = 'natcasesort'; insert = '(${1:array &array_arg})';},
	{display = 'natsort'; insert = '(${1:array &array_arg})';},
	{display = 'next'; insert = '(${1:array array_arg})';},
	{display = 'ngettext'; insert = '(${1:string MSGID1}, ${2:string MSGID2}, ${3:int N})';},
	{display = 'nl2br'; insert = '(${1:string str}, ${2:[bool is_xhtml]})';},
	{display = 'nl_langinfo'; insert = '(${1:int item})';},
	{display = 'normalizer_is_normalize'; insert = '(${1:string $input}, ${2:[string $form = FORM_C]})';},
	{display = 'normalizer_normalize'; insert = '(${1:string $input}, ${2:[string $form = FORM_C]})';},
	{display = 'nsapi_request_headers'; insert = '(${1:void})';},
	{display = 'nsapi_response_headers'; insert = '(${1:void})';},
	{display = 'nsapi_virtual'; insert = '(${1:string uri})';},
	{display = 'number_format'; insert = '(${1:float number}, ${2:[int num_decimal_places}, ${3:[string dec_seperator}, ${4:string thousands_seperator]]})';},
	{display = 'numfmt_create'; insert = '(${1:string $locale}, ${2:int style}, ${3:[string $pattern ]})';},
	{display = 'numfmt_format'; insert = '(${1:NumberFormatter $nf}, ${2:mixed $num}, ${3:[int type]})';},
	{display = 'numfmt_format_currency'; insert = '(${1:NumberFormatter $nf}, ${2:double $num}, ${3:string $currency})';},
	{display = 'numfmt_get_attribute'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr})';},
	{display = 'numfmt_get_error_code'; insert = '(${1:NumberFormatter $nf})';},
	{display = 'numfmt_get_error_message'; insert = '(${1:NumberFormatter $nf})';},
	{display = 'numfmt_get_locale'; insert = '(${1:NumberFormatter $nf}, ${2:[int type]})';},
	{display = 'numfmt_get_pattern'; insert = '(${1:NumberFormatter $nf})';},
	{display = 'numfmt_get_symbol'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr})';},
	{display = 'numfmt_get_text_attribute'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr})';},
	{display = 'numfmt_parse'; insert = '(${1:NumberFormatter $nf}, ${2:string $str}, ${3:[int $type}, ${4:int &$position ]})';},
	{display = 'numfmt_parse_currency'; insert = '(${1:NumberFormatter $nf}, ${2:string $str}, ${3:string $&currency}, ${4:[int $&position]})';},
	{display = 'numfmt_parse_message'; insert = '(${1:string $locale}, ${2:string $pattern}, ${3:string $source})';},
	{display = 'numfmt_set_attribute'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr}, ${3:mixed $value})';},
	{display = 'numfmt_set_pattern'; insert = '(${1:NumberFormatter $nf}, ${2:string $pattern})';},
	{display = 'numfmt_set_symbol'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr}, ${3:string $symbol})';},
	{display = 'numfmt_set_text_attribute'; insert = '(${1:NumberFormatter $nf}, ${2:int $attr}, ${3:string $value})';},
	{display = 'ob_clean'; insert = '(${1:void})';},
	{display = 'ob_end_clean'; insert = '(${1:void})';},
	{display = 'ob_end_flush'; insert = '(${1:void})';},
	{display = 'ob_flush'; insert = '(${1:void})';},
	{display = 'ob_get_clean'; insert = '(${1:void})';},
	{display = 'ob_get_contents'; insert = '(${1:void})';},
	{display = 'ob_get_flush'; insert = '(${1:void})';},
	{display = 'ob_get_length'; insert = '(${1:void})';},
	{display = 'ob_get_level'; insert = '(${1:void})';},
	{display = 'ob_get_status'; insert = '(${1:[bool full_status]})';},
	{display = 'ob_gzhandler'; insert = '(${1:string str}, ${2:int mode})';},
	{display = 'ob_iconv_handler'; insert = '(${1:string contents}, ${2:int status})';},
	{display = 'ob_implicit_flush'; insert = '(${1:[int flag]})';},
	{display = 'ob_list_handlers'; insert = '()';},
	{display = 'ob_start'; insert = '(${1:[ string|array user_function}, ${2:[int chunk_size}, ${3:[bool erase]]]})';},
	{display = 'oci_bind_array_by_name'; insert = '(${1:resource stmt}, ${2:string name}, ${3:array &var}, ${4:int max_table_length}, ${5:[int max_item_length}, ${6:[int type ]]})';},
	{display = 'oci_bind_by_name'; insert = '(${1:resource stmt}, ${2:string name}, ${3:mixed &var}, ${4:}, ${5:[int maxlength}, ${6:[int type]]})';},
	{display = 'oci_cancel'; insert = '(${1:resource stmt})';},
	{display = 'oci_close'; insert = '(${1:resource connection})';},
	{display = 'oci_collection_append'; insert = '(${1:string value})';},
	{display = 'oci_collection_assign'; insert = '(${1:object from})';},
	{display = 'oci_collection_element_assign'; insert = '(${1:int index}, ${2:string val})';},
	{display = 'oci_collection_element_get'; insert = '(${1:int ndx})';},
	{display = 'oci_collection_max'; insert = '()';},
	{display = 'oci_collection_size'; insert = '()';},
	{display = 'oci_collection_trim'; insert = '(${1:int num})';},
	{display = 'oci_commit'; insert = '(${1:resource connection})';},
	{display = 'oci_connect'; insert = '(${1:string user}, ${2:string pass}, ${3:[string db}, ${4:[string charset}, ${5:[int session_mode ]]})';},
	{display = 'oci_define_by_name'; insert = '(${1:resource stmt}, ${2:string name}, ${3:mixed &var}, ${4:[int type]})';},
	{display = 'oci_error'; insert = '(${1:[resource stmt|connection|global]})';},
	{display = 'oci_execute'; insert = '(${1:resource stmt}, ${2:[int mode]})';},
	{display = 'oci_fetch'; insert = '(${1:resource stmt})';},
	{display = 'oci_fetch_all'; insert = '(${1:resource stmt}, ${2:array &output}, ${3:[int skip}, ${4:[int maxrows}, ${5:[int flags]]]})';},
	{display = 'oci_fetch_array'; insert = '(${1:resource stmt}, ${2:[int mode ]})';},
	{display = 'oci_fetch_assoc'; insert = '(${1:resource stmt})';},
	{display = 'oci_fetch_object'; insert = '(${1:resource stmt})';},
	{display = 'oci_fetch_row'; insert = '(${1:resource stmt})';},
	{display = 'oci_field_is_null'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_name'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_precision'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_scale'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_size'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_type'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_field_type_raw'; insert = '(${1:resource stmt}, ${2:int col})';},
	{display = 'oci_free_collection'; insert = '()';},
	{display = 'oci_free_descriptor'; insert = '()';},
	{display = 'oci_free_statement'; insert = '(${1:resource stmt})';},
	{display = 'oci_internal_debug'; insert = '(${1:int onoff})';},
	{display = 'oci_lob_append'; insert = '(${1:object lob})';},
	{display = 'oci_lob_close'; insert = '()';},
	{display = 'oci_lob_copy'; insert = '(${1:object lob_to}, ${2:object lob_from}, ${3:[int length ]})';},
	{display = 'oci_lob_eof'; insert = '()';},
	{display = 'oci_lob_erase'; insert = '(${1:[ int offset}, ${2:[int length ] ]})';},
	{display = 'oci_lob_export'; insert = '(${1:[string filename}, ${2:[int start}, ${3:[int length]]]})';},
	{display = 'oci_lob_flush'; insert = '(${1:[ int flag ]})';},
	{display = 'oci_lob_import'; insert = '(${1:string filename})';},
	{display = 'oci_lob_is_equal'; insert = '(${1:object lob1}, ${2:object lob2})';},
	{display = 'oci_lob_load'; insert = '()';},
	{display = 'oci_lob_read'; insert = '(${1:int length})';},
	{display = 'oci_lob_rewind'; insert = '()';},
	{display = 'oci_lob_save'; insert = '(${1:string data}, ${2:[int offset ]})';},
	{display = 'oci_lob_seek'; insert = '(${1:int offset}, ${2:[int whence ]})';},
	{display = 'oci_lob_size'; insert = '()';},
	{display = 'oci_lob_tell'; insert = '()';},
	{display = 'oci_lob_truncate'; insert = '(${1:[ int length ]})';},
	{display = 'oci_lob_write'; insert = '(${1:string string}, ${2:[int length ]})';},
	{display = 'oci_lob_write_temporary'; insert = '(${1:string var}, ${2:[int lob_type]})';},
	{display = 'oci_new_collection'; insert = '(${1:resource connection}, ${2:string tdo}, ${3:[string schema]})';},
	{display = 'oci_new_connect'; insert = '(${1:string user}, ${2:string pass}, ${3:[string db]})';},
	{display = 'oci_new_cursor'; insert = '(${1:resource connection})';},
	{display = 'oci_new_descriptor'; insert = '(${1:resource connection}, ${2:[int type]})';},
	{display = 'oci_num_fields'; insert = '(${1:resource stmt})';},
	{display = 'oci_num_rows'; insert = '(${1:resource stmt})';},
	{display = 'oci_parse'; insert = '(${1:resource connection}, ${2:string query})';},
	{display = 'oci_password_change'; insert = '(${1:resource connection}, ${2:string username}, ${3:string old_password}, ${4:string new_password})';},
	{display = 'oci_pconnect'; insert = '(${1:string user}, ${2:string pass}, ${3:[string db}, ${4:[string charset ]]})';},
	{display = 'oci_result'; insert = '(${1:resource stmt}, ${2:mixed column})';},
	{display = 'oci_rollback'; insert = '(${1:resource connection})';},
	{display = 'oci_server_version'; insert = '(${1:resource connection})';},
	{display = 'oci_set_action'; insert = '(${1:resource connection}, ${2:string value})';},
	{display = 'oci_set_client_identifier'; insert = '(${1:resource connection}, ${2:string value})';},
	{display = 'oci_set_client_info'; insert = '(${1:resource connection}, ${2:string value})';},
	{display = 'oci_set_edition'; insert = '(${1:string value})';},
	{display = 'oci_set_module_name'; insert = '(${1:resource connection}, ${2:string value})';},
	{display = 'oci_set_prefetch'; insert = '(${1:resource stmt}, ${2:int prefetch_rows})';},
	{display = 'oci_statement_type'; insert = '(${1:resource stmt})';},
	{display = 'ocifetchinto'; insert = '(${1:resource stmt}, ${2:array &output}, ${3:[int mode]})';},
	{display = 'ocigetbufferinglob'; insert = '()';},
	{display = 'ocisetbufferinglob'; insert = '(${1:boolean flag})';},
	{display = 'octdec'; insert = '(${1:string octal_number})';},
	{display = 'odbc_autocommit'; insert = '(${1:resource connection_id}, ${2:[int OnOff]})';},
	{display = 'odbc_binmode'; insert = '(${1:int result_id}, ${2:int mode})';},
	{display = 'odbc_close'; insert = '(${1:resource connection_id})';},
	{display = 'odbc_close_all'; insert = '(${1:void})';},
	{display = 'odbc_columnprivileges'; insert = '(${1:resource connection_id}, ${2:string catalog}, ${3:string schema}, ${4:string table}, ${5:string column})';},
	{display = 'odbc_columns'; insert = '(${1:resource connection_id}, ${2:[string qualifier}, ${3:[string owner}, ${4:[string table_name}, ${5:[string column_name]]]]})';},
	{display = 'odbc_commit'; insert = '(${1:resource connection_id})';},
	{display = 'odbc_connect'; insert = '(${1:string DSN}, ${2:string user}, ${3:string password}, ${4:[int cursor_option]})';},
	{display = 'odbc_cursor'; insert = '(${1:resource result_id})';},
	{display = 'odbc_data_source'; insert = '(${1:resource connection_id}, ${2:int fetch_type})';},
	{display = 'odbc_error'; insert = '(${1:[resource connection_id]})';},
	{display = 'odbc_errormsg'; insert = '(${1:[resource connection_id]})';},
	{display = 'odbc_exec'; insert = '(${1:resource connection_id}, ${2:string query}, ${3:[int flags]})';},
	{display = 'odbc_execute'; insert = '(${1:resource result_id}, ${2:[array parameters_array]})';},
	{display = 'odbc_fetch_array'; insert = '(${1:int result}, ${2:[int rownumber]})';},
	{display = 'odbc_fetch_into'; insert = '(${1:resource result_id}, ${2:array &result_array}, ${3:}, ${4:[int rownumber]})';},
	{display = 'odbc_fetch_object'; insert = '(${1:int result}, ${2:[int rownumber]})';},
	{display = 'odbc_fetch_row'; insert = '(${1:resource result_id}, ${2:[int row_number]})';},
	{display = 'odbc_field_len'; insert = '(${1:resource result_id}, ${2:int field_number})';},
	{display = 'odbc_field_name'; insert = '(${1:resource result_id}, ${2:int field_number})';},
	{display = 'odbc_field_num'; insert = '(${1:resource result_id}, ${2:string field_name})';},
	{display = 'odbc_field_scale'; insert = '(${1:resource result_id}, ${2:int field_number})';},
	{display = 'odbc_field_type'; insert = '(${1:resource result_id}, ${2:int field_number})';},
	{display = 'odbc_foreignkeys'; insert = '(${1:resource connection_id}, ${2:string pk_qualifier}, ${3:string pk_owner}, ${4:string pk_table}, ${5:string fk_qualifier}, ${6:string fk_owner}, ${7:string fk_table})';},
	{display = 'odbc_free_result'; insert = '(${1:resource result_id})';},
	{display = 'odbc_gettypeinfo'; insert = '(${1:resource connection_id}, ${2:[int data_type]})';},
	{display = 'odbc_longreadlen'; insert = '(${1:int result_id}, ${2:int length})';},
	{display = 'odbc_next_result'; insert = '(${1:resource result_id})';},
	{display = 'odbc_num_fields'; insert = '(${1:resource result_id})';},
	{display = 'odbc_num_rows'; insert = '(${1:resource result_id})';},
	{display = 'odbc_pconnect'; insert = '(${1:string DSN}, ${2:string user}, ${3:string password}, ${4:[int cursor_option]})';},
	{display = 'odbc_prepare'; insert = '(${1:resource connection_id}, ${2:string query})';},
	{display = 'odbc_primarykeys'; insert = '(${1:resource connection_id}, ${2:string qualifier}, ${3:string owner}, ${4:string table})';},
	{display = 'odbc_procedurecolumns'; insert = '(${1:resource connection_id}, ${2:[string qualifier}, ${3:string owner}, ${4:string proc}, ${5:string column]})';},
	{display = 'odbc_procedures'; insert = '(${1:resource connection_id}, ${2:[string qualifier}, ${3:string owner}, ${4:string name]})';},
	{display = 'odbc_result'; insert = '(${1:resource result_id}, ${2:mixed field})';},
	{display = 'odbc_result_all'; insert = '(${1:resource result_id}, ${2:[string format]})';},
	{display = 'odbc_rollback'; insert = '(${1:resource connection_id})';},
	{display = 'odbc_setoption'; insert = '(${1:resource conn_id|result_id}, ${2:int which}, ${3:int option}, ${4:int value})';},
	{display = 'odbc_specialcolumns'; insert = '(${1:resource connection_id}, ${2:int type}, ${3:string qualifier}, ${4:string owner}, ${5:string table}, ${6:int scope}, ${7:int nullable})';},
	{display = 'odbc_statistics'; insert = '(${1:resource connection_id}, ${2:string qualifier}, ${3:string owner}, ${4:string name}, ${5:int unique}, ${6:int accuracy})';},
	{display = 'odbc_tableprivileges'; insert = '(${1:resource connection_id}, ${2:string qualifier}, ${3:string owner}, ${4:string name})';},
	{display = 'odbc_tables'; insert = '(${1:resource connection_id}, ${2:[string qualifier}, ${3:[string owner}, ${4:[string name}, ${5:[string table_types]]]]})';},
	{display = 'opendir'; insert = '(${1:string path}, ${2:[resource context]})';},
	{display = 'openlog'; insert = '(${1:string ident}, ${2:int option}, ${3:int facility})';},
	{display = 'openssl_csr_export'; insert = '(${1:resource csr}, ${2:string &out}, ${3:[bool notext=true]})';},
	{display = 'openssl_csr_export_to_file'; insert = '(${1:resource csr}, ${2:string outfilename}, ${3:[bool notext=true]})';},
	{display = 'openssl_csr_get_public_key'; insert = '(${1:mixed csr})';},
	{display = 'openssl_csr_get_subject'; insert = '(${1:mixed csr})';},
	{display = 'openssl_csr_new'; insert = '(${1:array dn}, ${2:resource &privkey}, ${3:[array configargs}, ${4:[array extraattribs]]})';},
	{display = 'openssl_csr_sign'; insert = '(${1:mixed csr}, ${2:mixed x509}, ${3:mixed priv_key}, ${4:long days}, ${5:[array config_args}, ${6:[long serial]]})';},
	{display = 'openssl_decrypt'; insert = '(${1:string data}, ${2:string method}, ${3:string password}, ${4:[bool raw_input=false]})';},
	{display = 'openssl_dh_compute_key'; insert = '(${1:string pub_key}, ${2:resource dh_key})';},
	{display = 'openssl_digest'; insert = '(${1:string data}, ${2:string method}, ${3:[bool raw_output=false]})';},
	{display = 'openssl_encrypt'; insert = '(${1:string data}, ${2:string method}, ${3:string password}, ${4:[bool raw_output=false]})';},
	{display = 'openssl_error_string'; insert = '(${1:void})';},
	{display = 'openssl_get_cipher_methods'; insert = '(${1:[bool aliases = false]})';},
	{display = 'openssl_get_md_methods'; insert = '(${1:[bool aliases = false]})';},
	{display = 'openssl_open'; insert = '(${1:string data}, ${2:&string opendata}, ${3:string ekey}, ${4:mixed privkey})';},
	{display = 'openssl_pkcs12_export'; insert = '(${1:mixed x509}, ${2:string &out}, ${3:mixed priv_key}, ${4:string pass}, ${5:[array args]})';},
	{display = 'openssl_pkcs12_export_to_file'; insert = '(${1:mixed x509}, ${2:string filename}, ${3:mixed priv_key}, ${4:string pass}, ${5:[array args]})';},
	{display = 'openssl_pkcs12_read'; insert = '(${1:string PKCS12}, ${2:array &certs}, ${3:string pass})';},
	{display = 'openssl_pkcs7_decrypt'; insert = '(${1:string infilename}, ${2:string outfilename}, ${3:mixed recipcert}, ${4:[mixed recipkey]})';},
	{display = 'openssl_pkcs7_encrypt'; insert = '(${1:string infile}, ${2:string outfile}, ${3:mixed recipcerts}, ${4:array headers}, ${5:[long flags}, ${6:[long cipher]]})';},
	{display = 'openssl_pkcs7_sign'; insert = '(${1:string infile}, ${2:string outfile}, ${3:mixed signcert}, ${4:mixed signkey}, ${5:array headers}, ${6:[long flags}, ${7:[string extracertsfilename]]})';},
	{display = 'openssl_pkcs7_verify'; insert = '(${1:string filename}, ${2:long flags}, ${3:[string signerscerts}, ${4:[array cainfo}, ${5:[string extracerts}, ${6:[string content]]]]})';},
	{display = 'openssl_pkey_export'; insert = '(${1:mixed key}, ${2:&mixed out}, ${3:[string passphrase}, ${4:[array config_args]]})';},
	{display = 'openssl_pkey_export_to_file'; insert = '(${1:mixed key}, ${2:string outfilename}, ${3:[string passphrase}, ${4:array config_args})';},
	{display = 'openssl_pkey_free'; insert = '(${1:int key})';},
	{display = 'openssl_pkey_get_details'; insert = '(${1:resource key})';},
	{display = 'openssl_pkey_get_private'; insert = '(${1:string key}, ${2:[string passphrase]})';},
	{display = 'openssl_pkey_get_public'; insert = '(${1:mixed cert})';},
	{display = 'openssl_pkey_new'; insert = '(${1:[array configargs]})';},
	{display = 'openssl_private_decrypt'; insert = '(${1:string data}, ${2:string &decrypted}, ${3:mixed key}, ${4:[int padding]})';},
	{display = 'openssl_private_encrypt'; insert = '(${1:string data}, ${2:string &crypted}, ${3:mixed key}, ${4:[int padding]})';},
	{display = 'openssl_public_decrypt'; insert = '(${1:string data}, ${2:string &crypted}, ${3:resource key}, ${4:[int padding]})';},
	{display = 'openssl_public_encrypt'; insert = '(${1:string data}, ${2:string &crypted}, ${3:mixed key}, ${4:[int padding]})';},
	{display = 'openssl_random_pseudo_bytes'; insert = '(${1:integer length}, ${2:[&bool returned_strong_result]})';},
	{display = 'openssl_seal'; insert = '(${1:string data}, ${2:&string sealdata}, ${3:&array ekeys}, ${4:array pubkeys})';},
	{display = 'openssl_sign'; insert = '(${1:string data}, ${2:&string signature}, ${3:mixed key}, ${4:[mixed method]})';},
	{display = 'openssl_verify'; insert = '(${1:string data}, ${2:string signature}, ${3:mixed key}, ${4:[mixed method]})';},
	{display = 'openssl_x509_check_private_key'; insert = '(${1:mixed cert}, ${2:mixed key})';},
	{display = 'openssl_x509_checkpurpose'; insert = '(${1:mixed x509cert}, ${2:int purpose}, ${3:array cainfo}, ${4:[string untrustedfile]})';},
	{display = 'openssl_x509_export'; insert = '(${1:mixed x509}, ${2:string &out}, ${3:[bool notext = true]})';},
	{display = 'openssl_x509_export_to_file'; insert = '(${1:mixed x509}, ${2:string outfilename}, ${3:[bool notext = true]})';},
	{display = 'openssl_x509_free'; insert = '(${1:resource x509})';},
	{display = 'openssl_x509_parse'; insert = '(${1:mixed x509}, ${2:[bool shortnames=true]})';},
	{display = 'openssl_x509_read'; insert = '(${1:mixed cert})';},
	{display = 'ord'; insert = '(${1:string character})';},
	{display = 'output_add_rewrite_var'; insert = '(${1:string name}, ${2:string value})';},
	{display = 'output_reset_rewrite_vars'; insert = '(${1:void})';},
	{display = 'pack'; insert = '(${1:string format}, ${2:mixed arg1}, ${3:[mixed arg2}, ${4:[mixed ...]]})';},
	{display = 'parse_ini_file'; insert = '(${1:string filename}, ${2:[bool process_sections}, ${3:[int scanner_mode]]})';},
	{display = 'parse_ini_string'; insert = '(${1:string ini_string}, ${2:[bool process_sections}, ${3:[int scanner_mode]]})';},
	{display = 'parse_locale'; insert = '(${1:$locale})';},
	{display = 'parse_str'; insert = '(${1:string encoded_string}, ${2:[array result]})';},
	{display = 'parse_url'; insert = '(${1:string url}, ${2:[int url_component]})';},
	{display = 'passthru'; insert = '(${1:string command}, ${2:[int &return_value]})';},
	{display = 'pathinfo'; insert = '(${1:string path}, ${2:[int options]})';},
	{display = 'pclose'; insert = '(${1:resource fp})';},
	{display = 'pcnlt_sigwaitinfo'; insert = '(${1:array set}, ${2:[array &siginfo]})';},
	{display = 'pcntl_alarm'; insert = '(${1:int seconds})';},
	{display = 'pcntl_exec'; insert = '(${1:string path}, ${2:[array args}, ${3:[array envs]]})';},
	{display = 'pcntl_fork'; insert = '(${1:void})';},
	{display = 'pcntl_getpriority'; insert = '(${1:[int pid}, ${2:[int process_identifier]]})';},
	{display = 'pcntl_setpriority'; insert = '(${1:int priority}, ${2:[int pid}, ${3:[int process_identifier]]})';},
	{display = 'pcntl_signal'; insert = '(${1:int signo}, ${2:callback handle}, ${3:[bool restart_syscalls]})';},
	{display = 'pcntl_signal_dispatch'; insert = '()';},
	{display = 'pcntl_sigprocmask'; insert = '(${1:int how}, ${2:array set}, ${3:[array &oldset]})';},
	{display = 'pcntl_sigtimedwait'; insert = '(${1:array set}, ${2:[array &siginfo}, ${3:[int seconds}, ${4:[int nanoseconds]]]})';},
	{display = 'pcntl_wait'; insert = '(${1:int &status})';},
	{display = 'pcntl_waitpid'; insert = '(${1:int pid}, ${2:int &status}, ${3:int options})';},
	{display = 'pcntl_wexitstatus'; insert = '(${1:int status})';},
	{display = 'pcntl_wifexited'; insert = '(${1:int status})';},
	{display = 'pcntl_wifsignaled'; insert = '(${1:int status})';},
	{display = 'pcntl_wifstopped'; insert = '(${1:int status})';},
	{display = 'pcntl_wstopsig'; insert = '(${1:int status})';},
	{display = 'pcntl_wtermsig'; insert = '(${1:int status})';},
	{display = 'pdo_drivers'; insert = '()';},
	{display = 'pfsockopen'; insert = '(${1:string hostname}, ${2:int port}, ${3:[int errno}, ${4:[string errstr}, ${5:[float timeout]]]})';},
	{display = 'pg_affected_rows'; insert = '(${1:resource result})';},
	{display = 'pg_cancel_query'; insert = '(${1:resource connection})';},
	{display = 'pg_client_encoding'; insert = '(${1:[resource connection]})';},
	{display = 'pg_close'; insert = '(${1:[resource connection]})';},
	{display = 'pg_connect'; insert = '(${1:string connection_string}, ${2:[int connect_type] | [string host}, ${3:string port}, ${4:[string options}, ${5:[string tty}, ${6:]]] string database})';},
	{display = 'pg_connection_busy'; insert = '(${1:resource connection})';},
	{display = 'pg_connection_reset'; insert = '(${1:resource connection})';},
	{display = 'pg_connection_status'; insert = '(${1:resource connnection})';},
	{display = 'pg_convert'; insert = '(${1:resource db}, ${2:string table}, ${3:array values}, ${4:[int options]})';},
	{display = 'pg_copy_from'; insert = '(${1:resource connection}, ${2:string table_name}, ${3:array rows}, ${4:[string delimiter}, ${5:[string null_as]]})';},
	{display = 'pg_copy_to'; insert = '(${1:resource connection}, ${2:string table_name}, ${3:[string delimiter}, ${4:[string null_as]]})';},
	{display = 'pg_dbname'; insert = '(${1:[resource connection]})';},
	{display = 'pg_delete'; insert = '(${1:resource db}, ${2:string table}, ${3:array ids}, ${4:[int options]})';},
	{display = 'pg_end_copy'; insert = '(${1:[resource connection]})';},
	{display = 'pg_escape_bytea'; insert = '(${1:[resource connection}, ${2:] string data})';},
	{display = 'pg_escape_string'; insert = '(${1:[resource connection}, ${2:] string data})';},
	{display = 'pg_execute'; insert = '(${1:[resource connection}, ${2:] string stmtname}, ${3:array params})';},
	{display = 'pg_fetch_all'; insert = '(${1:resource result})';},
	{display = 'pg_fetch_all_columns'; insert = '(${1:resource result}, ${2:[int column_number]})';},
	{display = 'pg_fetch_array'; insert = '(${1:resource result}, ${2:[int row}, ${3:[int result_type]]})';},
	{display = 'pg_fetch_assoc'; insert = '(${1:resource result}, ${2:[int row]})';},
	{display = 'pg_fetch_object'; insert = '(${1:resource result}, ${2:[int row}, ${3:[string class_name}, ${4:[NULL|array ctor_params]]]})';},
	{display = 'pg_fetch_result'; insert = '(${1:resource result}, ${2:[int row_number}, ${3:] mixed field_name})';},
	{display = 'pg_fetch_row'; insert = '(${1:resource result}, ${2:[int row}, ${3:[int result_type]]})';},
	{display = 'pg_field_is_null'; insert = '(${1:resource result}, ${2:[int row}, ${3:] mixed field_name_or_number})';},
	{display = 'pg_field_name'; insert = '(${1:resource result}, ${2:int field_number})';},
	{display = 'pg_field_num'; insert = '(${1:resource result}, ${2:string field_name})';},
	{display = 'pg_field_prtlen'; insert = '(${1:resource result}, ${2:[int row}, ${3:] mixed field_name_or_number})';},
	{display = 'pg_field_size'; insert = '(${1:resource result}, ${2:int field_number})';},
	{display = 'pg_field_table'; insert = '(${1:resource result}, ${2:int field_number}, ${3:[bool oid_only]})';},
	{display = 'pg_field_type'; insert = '(${1:resource result}, ${2:int field_number})';},
	{display = 'pg_field_type_oid'; insert = '(${1:resource result}, ${2:int field_number})';},
	{display = 'pg_free_result'; insert = '(${1:resource result})';},
	{display = 'pg_get_notify'; insert = '(${1:[resource connection}, ${2:[result_type]]})';},
	{display = 'pg_get_pid'; insert = '(${1:[resource connection})';},
	{display = 'pg_get_result'; insert = '(${1:resource connection})';},
	{display = 'pg_host'; insert = '(${1:[resource connection]})';},
	{display = 'pg_insert'; insert = '(${1:resource db}, ${2:string table}, ${3:array values}, ${4:[int options]})';},
	{display = 'pg_last_error'; insert = '(${1:[resource connection]})';},
	{display = 'pg_last_notice'; insert = '(${1:resource connection})';},
	{display = 'pg_last_oid'; insert = '(${1:resource result})';},
	{display = 'pg_lo_close'; insert = '(${1:resource large_object})';},
	{display = 'pg_lo_create'; insert = '(${1:[resource connection]}, ${2:[mixed large_object_oid]})';},
	{display = 'pg_lo_export'; insert = '(${1:[resource connection}, ${2:] int objoid}, ${3:string filename})';},
	{display = 'pg_lo_import'; insert = '(${1:[resource connection}, ${2:] string filename}, ${3:[mixed oid]})';},
	{display = 'pg_lo_open'; insert = '(${1:[resource connection}, ${2:] int large_object_oid}, ${3:string mode})';},
	{display = 'pg_lo_read'; insert = '(${1:resource large_object}, ${2:[int len]})';},
	{display = 'pg_lo_read_all'; insert = '(${1:resource large_object})';},
	{display = 'pg_lo_seek'; insert = '(${1:resource large_object}, ${2:int offset}, ${3:[int whence]})';},
	{display = 'pg_lo_tell'; insert = '(${1:resource large_object})';},
	{display = 'pg_lo_unlink'; insert = '(${1:[resource connection}, ${2:] string large_object_oid})';},
	{display = 'pg_lo_write'; insert = '(${1:resource large_object}, ${2:string buf}, ${3:[int len]})';},
	{display = 'pg_meta_data'; insert = '(${1:resource db}, ${2:string table})';},
	{display = 'pg_num_fields'; insert = '(${1:resource result})';},
	{display = 'pg_num_rows'; insert = '(${1:resource result})';},
	{display = 'pg_options'; insert = '(${1:[resource connection]})';},
	{display = 'pg_parameter_status'; insert = '(${1:[resource connection}, ${2:] string param_name})';},
	{display = 'pg_pconnect'; insert = '(${1:string connection_string | [string host}, ${2:string port}, ${3:[string options}, ${4:[string tty}, ${5:]]] string database})';},
	{display = 'pg_ping'; insert = '(${1:[resource connection]})';},
	{display = 'pg_port'; insert = '(${1:[resource connection]})';},
	{display = 'pg_prepare'; insert = '(${1:[resource connection}, ${2:] string stmtname}, ${3:string query})';},
	{display = 'pg_put_line'; insert = '(${1:[resource connection}, ${2:] string query})';},
	{display = 'pg_query'; insert = '(${1:[resource connection}, ${2:] string query})';},
	{display = 'pg_query_params'; insert = '(${1:[resource connection}, ${2:] string query}, ${3:array params})';},
	{display = 'pg_result_error'; insert = '(${1:resource result})';},
	{display = 'pg_result_error_field'; insert = '(${1:resource result}, ${2:int fieldcode})';},
	{display = 'pg_result_seek'; insert = '(${1:resource result}, ${2:int offset})';},
	{display = 'pg_result_status'; insert = '(${1:resource result}, ${2:[long result_type]})';},
	{display = 'pg_select'; insert = '(${1:resource db}, ${2:string table}, ${3:array ids}, ${4:[int options]})';},
	{display = 'pg_send_execute'; insert = '(${1:resource connection}, ${2:string stmtname}, ${3:array params})';},
	{display = 'pg_send_prepare'; insert = '(${1:resource connection}, ${2:string stmtname}, ${3:string query})';},
	{display = 'pg_send_query'; insert = '(${1:resource connection}, ${2:string query})';},
	{display = 'pg_send_query_params'; insert = '(${1:resource connection}, ${2:string query}, ${3:array params})';},
	{display = 'pg_set_client_encoding'; insert = '(${1:[resource connection}, ${2:] string encoding})';},
	{display = 'pg_set_error_verbosity'; insert = '(${1:[resource connection}, ${2:] int verbosity})';},
	{display = 'pg_trace'; insert = '(${1:string filename}, ${2:[string mode}, ${3:[resource connection]]})';},
	{display = 'pg_transaction_status'; insert = '(${1:resource connnection})';},
	{display = 'pg_tty'; insert = '(${1:[resource connection]})';},
	{display = 'pg_unescape_bytea'; insert = '(${1:string data})';},
	{display = 'pg_untrace'; insert = '(${1:[resource connection]})';},
	{display = 'pg_update'; insert = '(${1:resource db}, ${2:string table}, ${3:array fields}, ${4:array ids}, ${5:[int options]})';},
	{display = 'pg_version'; insert = '(${1:[resource connection]})';},
	{display = 'php_egg_logo_guid'; insert = '(${1:void})';},
	{display = 'php_ini_loaded_file'; insert = '(${1:void})';},
	{display = 'php_ini_scanned_files'; insert = '(${1:void})';},
	{display = 'php_logo_guid'; insert = '(${1:void})';},
	{display = 'php_real_logo_guid'; insert = '(${1:void})';},
	{display = 'php_sapi_name'; insert = '(${1:void})';},
	{display = 'php_snmpv3'; insert = '(${1:INTERNAL_FUNCTION_PARAMETERS}, ${2:int st})';},
	{display = 'php_strip_whitespace'; insert = '(${1:string file_name})';},
	{display = 'php_uname'; insert = '(${1:void})';},
	{display = 'phpcredits'; insert = '(${1:[int flag]})';},
	{display = 'phpinfo'; insert = '(${1:[int what]})';},
	{display = 'phpversion'; insert = '(${1:[string extension]})';},
	{display = 'pi'; insert = '(${1:void})';},
	{display = 'png2wbmp'; insert = '(${1:string f_org}, ${2:string f_dest}, ${3:int d_height}, ${4:int d_width}, ${5:int threshold})';},
	{display = 'popen'; insert = '(${1:string command}, ${2:string mode})';},
	{display = 'posix_access'; insert = '(${1:string file}, ${2:[int mode]})';},
	{display = 'posix_ctermid'; insert = '(${1:void})';},
	{display = 'posix_get_last_error'; insert = '(${1:void})';},
	{display = 'posix_getcwd'; insert = '(${1:void})';},
	{display = 'posix_getegid'; insert = '(${1:void})';},
	{display = 'posix_geteuid'; insert = '(${1:void})';},
	{display = 'posix_getgid'; insert = '(${1:void})';},
	{display = 'posix_getgrgid'; insert = '(${1:long gid})';},
	{display = 'posix_getgrnam'; insert = '(${1:string groupname})';},
	{display = 'posix_getgroups'; insert = '(${1:void})';},
	{display = 'posix_getlogin'; insert = '(${1:void})';},
	{display = 'posix_getpgid'; insert = '(${1:void})';},
	{display = 'posix_getpgrp'; insert = '(${1:void})';},
	{display = 'posix_getpid'; insert = '(${1:void})';},
	{display = 'posix_getppid'; insert = '(${1:void})';},
	{display = 'posix_getpwnam'; insert = '(${1:string groupname})';},
	{display = 'posix_getpwuid'; insert = '(${1:long uid})';},
	{display = 'posix_getrlimit'; insert = '(${1:void})';},
	{display = 'posix_getsid'; insert = '(${1:void})';},
	{display = 'posix_getuid'; insert = '(${1:void})';},
	{display = 'posix_initgroups'; insert = '(${1:string name}, ${2:int base_group_id})';},
	{display = 'posix_isatty'; insert = '(${1:int fd})';},
	{display = 'posix_kill'; insert = '(${1:int pid}, ${2:int sig})';},
	{display = 'posix_mkfifo'; insert = '(${1:string pathname}, ${2:int mode})';},
	{display = 'posix_mknod'; insert = '(${1:string pathname}, ${2:int mode}, ${3:[int major}, ${4:[int minor]]})';},
	{display = 'posix_setegid'; insert = '(${1:long uid})';},
	{display = 'posix_seteuid'; insert = '(${1:long uid})';},
	{display = 'posix_setgid'; insert = '(${1:int uid})';},
	{display = 'posix_setpgid'; insert = '(${1:int pid}, ${2:int pgid})';},
	{display = 'posix_setsid'; insert = '(${1:void})';},
	{display = 'posix_setuid'; insert = '(${1:long uid})';},
	{display = 'posix_strerror'; insert = '(${1:int errno})';},
	{display = 'posix_times'; insert = '(${1:void})';},
	{display = 'posix_ttyname'; insert = '(${1:int fd})';},
	{display = 'posix_uname'; insert = '(${1:void})';},
	{display = 'pow'; insert = '(${1:number base}, ${2:number exponent})';},
	{display = 'preg_filter'; insert = '(${1:mixed regex}, ${2:mixed replace}, ${3:mixed subject}, ${4:[int limit}, ${5:[int &count]]})';},
	{display = 'preg_grep'; insert = '(${1:string regex}, ${2:array input}, ${3:[int flags]})';},
	{display = 'preg_last_error'; insert = '()';},
	{display = 'preg_match'; insert = '(${1:string pattern}, ${2:string subject}, ${3:[array &subpatterns}, ${4:[int flags}, ${5:[int offset]]]})';},
	{display = 'preg_match_all'; insert = '(${1:string pattern}, ${2:string subject}, ${3:array &subpatterns}, ${4:[int flags}, ${5:[int offset]]})';},
	{display = 'preg_quote'; insert = '(${1:string str}, ${2:[string delim_char]})';},
	{display = 'preg_replace'; insert = '(${1:mixed regex}, ${2:mixed replace}, ${3:mixed subject}, ${4:[int limit}, ${5:[int &count]]})';},
	{display = 'preg_replace_callback'; insert = '(${1:mixed regex}, ${2:mixed callback}, ${3:mixed subject}, ${4:[int limit}, ${5:[int &count]]})';},
	{display = 'preg_split'; insert = '(${1:string pattern}, ${2:string subject}, ${3:[int limit}, ${4:[int flags]]})';},
	{display = 'prev'; insert = '(${1:array array_arg})';},
	{display = 'print'; insert = '(${1:string arg})';},
	{display = 'print_r'; insert = '(${1:mixed var}, ${2:[bool return]})';},
	{display = 'printf'; insert = '(${1:string format}, ${2:[mixed arg1}, ${3:[mixed ...]]})';},
	{display = 'proc_close'; insert = '(${1:resource process})';},
	{display = 'proc_get_status'; insert = '(${1:resource process})';},
	{display = 'proc_nice'; insert = '(${1:int priority})';},
	{display = 'proc_open'; insert = '(${1:string command}, ${2:array descriptorspec}, ${3:array &pipes}, ${4:[string cwd}, ${5:[array env}, ${6:[array other_options]]]})';},
	{display = 'proc_terminate'; insert = '(${1:resource process}, ${2:[long signal]})';},
	{display = 'property_exists'; insert = '(${1:mixed object_or_class}, ${2:string property_name})';},
	{display = 'pspell_add_to_personal'; insert = '(${1:int pspell}, ${2:string word})';},
	{display = 'pspell_add_to_session'; insert = '(${1:int pspell}, ${2:string word})';},
	{display = 'pspell_check'; insert = '(${1:int pspell}, ${2:string word})';},
	{display = 'pspell_clear_session'; insert = '(${1:int pspell})';},
	{display = 'pspell_config_create'; insert = '(${1:string language}, ${2:[string spelling}, ${3:[string jargon}, ${4:[string encoding]]]})';},
	{display = 'pspell_config_data_dir'; insert = '(${1:int conf}, ${2:string directory})';},
	{display = 'pspell_config_dict_dir'; insert = '(${1:int conf}, ${2:string directory})';},
	{display = 'pspell_config_ignore'; insert = '(${1:int conf}, ${2:int ignore})';},
	{display = 'pspell_config_mode'; insert = '(${1:int conf}, ${2:long mode})';},
	{display = 'pspell_config_personal'; insert = '(${1:int conf}, ${2:string personal})';},
	{display = 'pspell_config_repl'; insert = '(${1:int conf}, ${2:string repl})';},
	{display = 'pspell_config_runtogether'; insert = '(${1:int conf}, ${2:bool runtogether})';},
	{display = 'pspell_config_save_repl'; insert = '(${1:int conf}, ${2:bool save})';},
	{display = 'pspell_new'; insert = '(${1:string language}, ${2:[string spelling}, ${3:[string jargon}, ${4:[string encoding}, ${5:[int mode]]]]})';},
	{display = 'pspell_new_config'; insert = '(${1:int config})';},
	{display = 'pspell_new_personal'; insert = '(${1:string personal}, ${2:string language}, ${3:[string spelling}, ${4:[string jargon}, ${5:[string encoding}, ${6:[int mode]]]]})';},
	{display = 'pspell_save_wordlist'; insert = '(${1:int pspell})';},
	{display = 'pspell_store_replacement'; insert = '(${1:int pspell}, ${2:string misspell}, ${3:string correct})';},
	{display = 'pspell_suggest'; insert = '(${1:int pspell}, ${2:string word})';},
	{display = 'putenv'; insert = '(${1:string setting})';},
	{display = 'quoted_printable_decode'; insert = '(${1:string str})';},
	{display = 'quoted_printable_encode'; insert = '(${1:string str})';},
	{display = 'quotemeta'; insert = '(${1:string str})';},
	{display = 'rad2deg'; insert = '(${1:float number})';},
	{display = 'rand'; insert = '(${1:[int min}, ${2:int max]})';},
	{display = 'range'; insert = '(${1:mixed low}, ${2:mixed high}, ${3:[int step]})';},
	{display = 'rawurldecode'; insert = '(${1:string str})';},
	{display = 'rawurlencode'; insert = '(${1:string str})';},
	{display = 'readdir'; insert = '(${1:[resource dir_handle]})';},
	{display = 'readfile'; insert = '(${1:string filename}, ${2:[bool use_include_path}, ${3:[resource context]]})';},
	{display = 'readgzfile'; insert = '(${1:string filename}, ${2:[int use_include_path]})';},
	{display = 'readline'; insert = '(${1:[string prompt]})';},
	{display = 'readline_add_history'; insert = '(${1:string prompt})';},
	{display = 'readline_callback_handler_install'; insert = '(${1:string prompt}, ${2:mixed callback})';},
	{display = 'readline_callback_handler_remove'; insert = '()';},
	{display = 'readline_callback_read_char'; insert = '()';},
	{display = 'readline_clear_history'; insert = '(${1:void})';},
	{display = 'readline_completion_function'; insert = '(${1:string funcname})';},
	{display = 'readline_info'; insert = '(${1:[string varname}, ${2:[string newvalue]]})';},
	{display = 'readline_list_history'; insert = '(${1:void})';},
	{display = 'readline_on_new_line'; insert = '(${1:void})';},
	{display = 'readline_read_history'; insert = '(${1:[string filename]})';},
	{display = 'readline_redisplay'; insert = '(${1:void})';},
	{display = 'readline_write_history'; insert = '(${1:[string filename]})';},
	{display = 'readlink'; insert = '(${1:string filename})';},
	{display = 'realpath'; insert = '(${1:string path})';},
	{display = 'realpath_cache_get'; insert = '()';},
	{display = 'realpath_cache_size'; insert = '()';},
	{display = 'recode_file'; insert = '(${1:string request}, ${2:resource input}, ${3:resource output})';},
	{display = 'recode_string'; insert = '(${1:string request}, ${2:string str})';},
	{display = 'register_shutdown_function'; insert = '(${1:string function_name})';},
	{display = 'register_tick_function'; insert = '(${1:string function_name}, ${2:[mixed arg}, ${3:[mixed ... ]]})';},
	{display = 'rename'; insert = '(${1:string old_name}, ${2:string new_name}, ${3:[resource context]})';},
	{display = 'require'; insert = '(${1:string path})';},
	{display = 'require_once'; insert = '(${1:string path})';},
	{display = 'reset'; insert = '(${1:array array_arg})';},
	{display = 'restore_error_handler'; insert = '(${1:void})';},
	{display = 'restore_exception_handler'; insert = '(${1:void})';},
	{display = 'restore_include_path'; insert = '()';},
	{display = 'rewind'; insert = '(${1:resource fp})';},
	{display = 'rewinddir'; insert = '(${1:[resource dir_handle]})';},
	{display = 'rmdir'; insert = '(${1:string dirname}, ${2:[resource context]})';},
	{display = 'round'; insert = '(${1:float number}, ${2:[int precision}, ${3:[int mode]]})';},
	{display = 'rsort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'rtrim'; insert = '(${1:string str}, ${2:[string character_mask]})';},
	{display = 'scandir'; insert = '(${1:string dir}, ${2:[int sorting_order}, ${3:[resource context]]})';},
	{display = 'sem_acquire'; insert = '(${1:resource id})';},
	{display = 'sem_get'; insert = '(${1:int key}, ${2:[int max_acquire}, ${3:[int perm}, ${4:[int auto_release]]})';},
	{display = 'sem_release'; insert = '(${1:resource id})';},
	{display = 'sem_remove'; insert = '(${1:resource id})';},
	{display = 'serialize'; insert = '(${1:mixed variable})';},
	{display = 'session_cache_expire'; insert = '(${1:[int new_cache_expire]})';},
	{display = 'session_cache_limiter'; insert = '(${1:[string new_cache_limiter]})';},
	{display = 'session_decode'; insert = '(${1:string data})';},
	{display = 'session_destroy'; insert = '(${1:void})';},
	{display = 'session_encode'; insert = '(${1:void})';},
	{display = 'session_get_cookie_params'; insert = '(${1:void})';},
	{display = 'session_id'; insert = '(${1:[string newid]})';},
	{display = 'session_is_registered'; insert = '(${1:string varname})';},
	{display = 'session_module_name'; insert = '(${1:[string newname]})';},
	{display = 'session_name'; insert = '(${1:[string newname]})';},
	{display = 'session_regenerate_id'; insert = '(${1:[bool delete_old_session]})';},
	{display = 'session_register'; insert = '(${1:mixed var_names}, ${2:[mixed ...]})';},
	{display = 'session_save_path'; insert = '(${1:[string newname]})';},
	{display = 'session_set_cookie_params'; insert = '(${1:int lifetime}, ${2:[string path}, ${3:[string domain}, ${4:[bool secure}, ${5:[bool httponly]]]]})';},
	{display = 'session_set_save_handler'; insert = '(${1:string open}, ${2:string close}, ${3:string read}, ${4:string write}, ${5:string destroy}, ${6:string gc})';},
	{display = 'session_start'; insert = '(${1:void})';},
	{display = 'session_unregister'; insert = '(${1:string varname})';},
	{display = 'session_unset'; insert = '(${1:void})';},
	{display = 'session_write_close'; insert = '(${1:void})';},
	{display = 'set_error_handler'; insert = '(${1:string error_handler}, ${2:[int error_types]})';},
	{display = 'set_exception_handler'; insert = '(${1:callable exception_handler})';},
	{display = 'set_include_path'; insert = '(${1:string new_include_path})';},
	{display = 'set_magic_quotes_runtime'; insert = '(${1:int new_setting})';},
	{display = 'set_time_limit'; insert = '(${1:int seconds})';},
	{display = 'setcookie'; insert = '(${1:string name}, ${2:[string value}, ${3:[int expires}, ${4:[string path}, ${5:[string domain}, ${6:[bool secure}, ${7:[bool httponly]]]]]]})';},
	{display = 'setlocale'; insert = '(${1:mixed category}, ${2:string locale}, ${3:[string ...]})';},
	{display = 'setrawcookie'; insert = '(${1:string name}, ${2:[string value}, ${3:[int expires}, ${4:[string path}, ${5:[string domain}, ${6:[bool secure}, ${7:[bool httponly]]]]]]})';},
	{display = 'settype'; insert = '(${1:mixed var}, ${2:string type})';},
	{display = 'sha1'; insert = '(${1:string str}, ${2:[bool raw_output]})';},
	{display = 'sha1_file'; insert = '(${1:string filename}, ${2:[bool raw_output]})';},
	{display = 'shell_exec'; insert = '(${1:string cmd})';},
	{display = 'shm_attach'; insert = '(${1:int key}, ${2:[int memsize}, ${3:[int perm]]})';},
	{display = 'shm_detach'; insert = '(${1:resource shm_identifier})';},
	{display = 'shm_get_var'; insert = '(${1:resource id}, ${2:int variable_key})';},
	{display = 'shm_has_var'; insert = '(${1:resource id}, ${2:int variable_key})';},
	{display = 'shm_put_var'; insert = '(${1:resource shm_identifier}, ${2:int variable_key}, ${3:mixed variable})';},
	{display = 'shm_remove'; insert = '(${1:resource shm_identifier})';},
	{display = 'shm_remove_var'; insert = '(${1:resource id}, ${2:int variable_key})';},
	{display = 'shmop_close'; insert = '(${1:int shmid})';},
	{display = 'shmop_delete'; insert = '(${1:int shmid})';},
	{display = 'shmop_open'; insert = '(${1:int key}, ${2:string flags}, ${3:int mode}, ${4:int size})';},
	{display = 'shmop_read'; insert = '(${1:int shmid}, ${2:int start}, ${3:int count})';},
	{display = 'shmop_size'; insert = '(${1:int shmid})';},
	{display = 'shmop_write'; insert = '(${1:int shmid}, ${2:string data}, ${3:int offset})';},
	{display = 'shuffle'; insert = '(${1:array array_arg})';},
	{display = 'similar_text'; insert = '(${1:string str1}, ${2:string str2}, ${3:[float percent]})';},
	{display = 'simplexml_import_dom'; insert = '(${1:domNode node}, ${2:[string class_name]})';},
	{display = 'simplexml_load_file'; insert = '(${1:string filename}, ${2:[string class_name}, ${3:[int options}, ${4:[string ns}, ${5:[bool is_prefix]]]]})';},
	{display = 'simplexml_load_string'; insert = '(${1:string data}, ${2:[string class_name}, ${3:[int options}, ${4:[string ns}, ${5:[bool is_prefix]]]]})';},
	{display = 'sin'; insert = '(${1:float number})';},
	{display = 'sinh'; insert = '(${1:float number})';},
	{display = 'sleep'; insert = '(${1:int seconds})';},
	{display = 'smfi_addheader'; insert = '(${1:string headerf}, ${2:string headerv})';},
	{display = 'smfi_addrcpt'; insert = '(${1:string rcpt})';},
	{display = 'smfi_chgheader'; insert = '(${1:string headerf}, ${2:string headerv})';},
	{display = 'smfi_delrcpt'; insert = '(${1:string rcpt})';},
	{display = 'smfi_getsymval'; insert = '(${1:string macro})';},
	{display = 'smfi_replacebody'; insert = '(${1:string body})';},
	{display = 'smfi_setflags'; insert = '(${1:long flags})';},
	{display = 'smfi_setreply'; insert = '(${1:string rcode}, ${2:string xcode}, ${3:string message})';},
	{display = 'smfi_settimeout'; insert = '(${1:long timeout})';},
	{display = 'snmp2_get'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmp2_getnext'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmp2_real_walk'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmp2_set'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:string type}, ${5:mixed value}, ${6:[int timeout}, ${7:[int retries]]})';},
	{display = 'snmp2_walk'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmp3_get'; insert = '(${1:string host}, ${2:string sec_name}, ${3:string sec_level}, ${4:string auth_protocol}, ${5:string auth_passphrase}, ${6:string priv_protocol}, ${7:string priv_passphrase}, ${8:string object_id}, ${9:[int timeout}, ${10:[int retries]]})';},
	{display = 'snmp3_getnext'; insert = '(${1:string host}, ${2:string sec_name}, ${3:string sec_level}, ${4:string auth_protocol}, ${5:string auth_passphrase}, ${6:string priv_protocol}, ${7:string priv_passphrase}, ${8:string object_id}, ${9:[int timeout}, ${10:[int retries]]})';},
	{display = 'snmp3_real_walk'; insert = '(${1:string host}, ${2:string sec_name}, ${3:string sec_level}, ${4:string auth_protocol}, ${5:string auth_passphrase}, ${6:string priv_protocol}, ${7:string priv_passphrase}, ${8:string object_id}, ${9:[int timeout}, ${10:[int retries]]})';},
	{display = 'snmp3_set'; insert = '(${1:string host}, ${2:string sec_name}, ${3:string sec_level}, ${4:string auth_protocol}, ${5:string auth_passphrase}, ${6:string priv_protocol}, ${7:string priv_passphrase}, ${8:string object_id}, ${9:string type}, ${10:mixed value}, ${11:[int timeout}, ${12:[int retries]]})';},
	{display = 'snmp3_walk'; insert = '(${1:string host}, ${2:string sec_name}, ${3:string sec_level}, ${4:string auth_protocol}, ${5:string auth_passphrase}, ${6:string priv_protocol}, ${7:string priv_passphrase}, ${8:string object_id}, ${9:[int timeout}, ${10:[int retries]]})';},
	{display = 'snmp_get_quick_print'; insert = '(${1:void})';},
	{display = 'snmp_get_valueretrieval'; insert = '()';},
	{display = 'snmp_read_mib'; insert = '(${1:string filename})';},
	{display = 'snmp_set_enum_print'; insert = '(${1:int enum_print})';},
	{display = 'snmp_set_oid_output_format'; insert = '(${1:int oid_format})';},
	{display = 'snmp_set_quick_print'; insert = '(${1:int quick_print})';},
	{display = 'snmp_set_valueretrieval'; insert = '(${1:int method})';},
	{display = 'snmpget'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmpgetnext'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmprealwalk'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'snmpset'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:string type}, ${5:mixed value}, ${6:[int timeout}, ${7:[int retries]]})';},
	{display = 'snmpwalk'; insert = '(${1:string host}, ${2:string community}, ${3:string object_id}, ${4:[int timeout}, ${5:[int retries]]})';},
	{display = 'socket_accept'; insert = '(${1:resource socket})';},
	{display = 'socket_bind'; insert = '(${1:resource socket}, ${2:string addr}, ${3:[int port]})';},
	{display = 'socket_clear_error'; insert = '(${1:[resource socket]})';},
	{display = 'socket_close'; insert = '(${1:resource socket})';},
	{display = 'socket_connect'; insert = '(${1:resource socket}, ${2:string addr}, ${3:[int port]})';},
	{display = 'socket_create'; insert = '(${1:int domain}, ${2:int type}, ${3:int protocol})';},
	{display = 'socket_create_listen'; insert = '(${1:int port}, ${2:[int backlog]})';},
	{display = 'socket_create_pair'; insert = '(${1:int domain}, ${2:int type}, ${3:int protocol}, ${4:array &fd})';},
	{display = 'socket_get_option'; insert = '(${1:resource socket}, ${2:int level}, ${3:int optname})';},
	{display = 'socket_getpeername'; insert = '(${1:resource socket}, ${2:string &addr}, ${3:[int &port]})';},
	{display = 'socket_getsockname'; insert = '(${1:resource socket}, ${2:string &addr}, ${3:[int &port]})';},
	{display = 'socket_last_error'; insert = '(${1:[resource socket]})';},
	{display = 'socket_listen'; insert = '(${1:resource socket}, ${2:[int backlog]})';},
	{display = 'socket_read'; insert = '(${1:resource socket}, ${2:int length}, ${3:[int type]})';},
	{display = 'socket_recv'; insert = '(${1:resource socket}, ${2:string &buf}, ${3:int len}, ${4:int flags})';},
	{display = 'socket_recvfrom'; insert = '(${1:resource socket}, ${2:string &buf}, ${3:int len}, ${4:int flags}, ${5:string &name}, ${6:[int &port]})';},
	{display = 'socket_select'; insert = '(${1:array &read_fds}, ${2:array &write_fds}, ${3:array &except_fds}, ${4:int tv_sec}, ${5:[int tv_usec]})';},
	{display = 'socket_send'; insert = '(${1:resource socket}, ${2:string buf}, ${3:int len}, ${4:int flags})';},
	{display = 'socket_sendto'; insert = '(${1:resource socket}, ${2:string buf}, ${3:int len}, ${4:int flags}, ${5:string addr}, ${6:[int port]})';},
	{display = 'socket_set_block'; insert = '(${1:resource socket})';},
	{display = 'socket_set_nonblock'; insert = '(${1:resource socket})';},
	{display = 'socket_set_option'; insert = '(${1:resource socket}, ${2:int level}, ${3:int optname}, ${4:int|array optval})';},
	{display = 'socket_shutdown'; insert = '(${1:resource socket}, ${2:[int how]})';},
	{display = 'socket_strerror'; insert = '(${1:int errno})';},
	{display = 'socket_write'; insert = '(${1:resource socket}, ${2:string buf}, ${3:[int length]})';},
	{display = 'solid_fetch_prev'; insert = '(${1:resource result_id})';},
	{display = 'sort'; insert = '(${1:array &array_arg}, ${2:[int sort_flags]})';},
	{display = 'soundex'; insert = '(${1:string str})';},
	{display = 'spl_autoload'; insert = '(${1:string class_name}, ${2:[string file_extensions]})';},
	{display = 'spl_autoload_call'; insert = '(${1:string class_name})';},
	{display = 'spl_autoload_extensions'; insert = '(${1:[string file_extensions]})';},
	{display = 'spl_autoload_functions'; insert = '()';},
	{display = 'spl_autoload_register'; insert = '(${1:[mixed autoload_function = "spl_autoload"}, ${2:[throw = true}, ${3:[prepend]]]})';},
	{display = 'spl_autoload_unregister'; insert = '(${1:mixed autoload_function})';},
	{display = 'spl_classes'; insert = '()';},
	{display = 'spl_object_hash'; insert = '(${1:object obj})';},
	{display = 'split'; insert = '(${1:string pattern}, ${2:string string}, ${3:[int limit]})';},
	{display = 'spliti'; insert = '(${1:string pattern}, ${2:string string}, ${3:[int limit]})';},
	{display = 'sprintf'; insert = '(${1:string format}, ${2:[mixed arg1}, ${3:[mixed ...]]})';},
	{display = 'sql_regcase'; insert = '(${1:string string})';},
	{display = 'sqlite_array_query'; insert = '(${1:resource db}, ${2:string query}, ${3:[int result_type}, ${4:[bool decode_binary]]})';},
	{display = 'sqlite_busy_timeout'; insert = '(${1:resource db}, ${2:int ms})';},
	{display = 'sqlite_changes'; insert = '(${1:resource db})';},
	{display = 'sqlite_close'; insert = '(${1:resource db})';},
	{display = 'sqlite_column'; insert = '(${1:resource result}, ${2:mixed index_or_name}, ${3:[bool decode_binary]})';},
	{display = 'sqlite_create_aggregate'; insert = '(${1:resource db}, ${2:string funcname}, ${3:mixed step_func}, ${4:mixed finalize_func}, ${5:[long num_args]})';},
	{display = 'sqlite_create_function'; insert = '(${1:resource db}, ${2:string funcname}, ${3:mixed callback}, ${4:[long num_args]})';},
	{display = 'sqlite_current'; insert = '(${1:resource result}, ${2:[int result_type}, ${3:[bool decode_binary]]})';},
	{display = 'sqlite_error_string'; insert = '(${1:int error_code})';},
	{display = 'sqlite_escape_string'; insert = '(${1:string item})';},
	{display = 'sqlite_exec'; insert = '(${1:string query}, ${2:resource db}, ${3:[string &error_message]})';},
	{display = 'sqlite_factory'; insert = '(${1:string filename}, ${2:[int mode}, ${3:[string &error_message]]})';},
	{display = 'sqlite_fetch_all'; insert = '(${1:resource result}, ${2:[int result_type}, ${3:[bool decode_binary]]})';},
	{display = 'sqlite_fetch_array'; insert = '(${1:resource result}, ${2:[int result_type}, ${3:[bool decode_binary]]})';},
	{display = 'sqlite_fetch_column_types'; insert = '(${1:string table_name}, ${2:resource db}, ${3:[int result_type]})';},
	{display = 'sqlite_fetch_object'; insert = '(${1:resource result}, ${2:[string class_name}, ${3:[NULL|array ctor_params}, ${4:[bool decode_binary]]]})';},
	{display = 'sqlite_fetch_single'; insert = '(${1:resource result}, ${2:[bool decode_binary]})';},
	{display = 'sqlite_field_name'; insert = '(${1:resource result}, ${2:int field_index})';},
	{display = 'sqlite_has_prev'; insert = '(${1:resource result})';},
	{display = 'sqlite_key'; insert = '(${1:resource result})';},
	{display = 'sqlite_last_error'; insert = '(${1:resource db})';},
	{display = 'sqlite_last_insert_rowid'; insert = '(${1:resource db})';},
	{display = 'sqlite_libencoding'; insert = '()';},
	{display = 'sqlite_libversion'; insert = '()';},
	{display = 'sqlite_next'; insert = '(${1:resource result})';},
	{display = 'sqlite_num_fields'; insert = '(${1:resource result})';},
	{display = 'sqlite_num_rows'; insert = '(${1:resource result})';},
	{display = 'sqlite_open'; insert = '(${1:string filename}, ${2:[int mode}, ${3:[string &error_message]]})';},
	{display = 'sqlite_popen'; insert = '(${1:string filename}, ${2:[int mode}, ${3:[string &error_message]]})';},
	{display = 'sqlite_prev'; insert = '(${1:resource result})';},
	{display = 'sqlite_query'; insert = '(${1:string query}, ${2:resource db}, ${3:[int result_type}, ${4:[string &error_message]]})';},
	{display = 'sqlite_rewind'; insert = '(${1:resource result})';},
	{display = 'sqlite_seek'; insert = '(${1:resource result}, ${2:int row})';},
	{display = 'sqlite_single_query'; insert = '(${1:resource db}, ${2:string query}, ${3:[bool first_row_only}, ${4:[bool decode_binary]]})';},
	{display = 'sqlite_udf_decode_binary'; insert = '(${1:string data})';},
	{display = 'sqlite_udf_encode_binary'; insert = '(${1:string data})';},
	{display = 'sqlite_unbuffered_query'; insert = '(${1:string query}, ${2:resource db}, ${3:[int result_type}, ${4:[string &error_message]]})';},
	{display = 'sqlite_valid'; insert = '(${1:resource result})';},
	{display = 'sqrt'; insert = '(${1:float number})';},
	{display = 'srand'; insert = '(${1:[int seed]})';},
	{display = 'sscanf'; insert = '(${1:string str}, ${2:string format}, ${3:[string ...]})';},
	{display = 'stat'; insert = '(${1:string filename})';},
	{display = 'str_getcsv'; insert = '(${1:string input}, ${2:[string delimiter}, ${3:[string enclosure}, ${4:[string escape]]]})';},
	{display = 'str_ireplace'; insert = '(${1:mixed search}, ${2:mixed replace}, ${3:mixed subject}, ${4:[int &replace_count]})';},
	{display = 'str_pad'; insert = '(${1:string input}, ${2:int pad_length}, ${3:[string pad_string}, ${4:[int pad_type]]})';},
	{display = 'str_repeat'; insert = '(${1:string input}, ${2:int mult})';},
	{display = 'str_replace'; insert = '(${1:mixed search}, ${2:mixed replace}, ${3:mixed subject}, ${4:[int &replace_count]})';},
	{display = 'str_rot13'; insert = '(${1:string str})';},
	{display = 'str_shuffle'; insert = '(${1:string str})';},
	{display = 'str_split'; insert = '(${1:string str}, ${2:[int split_length]})';},
	{display = 'str_word_count'; insert = '(${1:string str}, ${2:[int format}, ${3:[string charlist]]})';},
	{display = 'strcasecmp'; insert = '(${1:string str1}, ${2:string str2})';},
	{display = 'strchr'; insert = '(${1:string haystack}, ${2:string needle})';},
	{display = 'strcmp'; insert = '(${1:string str1}, ${2:string str2})';},
	{display = 'strcoll'; insert = '(${1:string str1}, ${2:string str2})';},
	{display = 'strcspn'; insert = '(${1:string str}, ${2:string mask}, ${3:[start}, ${4:[len]]})';},
	{display = 'stream_bucket_append'; insert = '(${1:resource brigade}, ${2:resource bucket})';},
	{display = 'stream_bucket_make_writeable'; insert = '(${1:resource brigade})';},
	{display = 'stream_bucket_new'; insert = '(${1:resource stream}, ${2:string buffer})';},
	{display = 'stream_bucket_prepend'; insert = '(${1:resource brigade}, ${2:resource bucket})';},
	{display = 'stream_context_create'; insert = '(${1:[array options}, ${2:[array params]]})';},
	{display = 'stream_context_get_default'; insert = '(${1:[array options]})';},
	{display = 'stream_context_get_options'; insert = '(${1:resource context|resource stream})';},
	{display = 'stream_context_get_params'; insert = '(${1:resource context|resource stream})';},
	{display = 'stream_context_set_default'; insert = '(${1:array options})';},
	{display = 'stream_context_set_option'; insert = '(${1:resource context|resource stream}, ${2:string wrappername}, ${3:string optionname}, ${4:mixed value})';},
	{display = 'stream_context_set_params'; insert = '(${1:resource context|resource stream}, ${2:array options})';},
	{display = 'stream_copy_to_stream'; insert = '(${1:resource source}, ${2:resource dest}, ${3:[long maxlen}, ${4:[long pos]]})';},
	{display = 'stream_filter_append'; insert = '(${1:resource stream}, ${2:string filtername}, ${3:[int read_write}, ${4:[string filterparams]]})';},
	{display = 'stream_filter_prepend'; insert = '(${1:resource stream}, ${2:string filtername}, ${3:[int read_write}, ${4:[string filterparams]]})';},
	{display = 'stream_filter_register'; insert = '(${1:string filtername}, ${2:string classname})';},
	{display = 'stream_filter_remove'; insert = '(${1:resource stream_filter})';},
	{display = 'stream_get_contents'; insert = '(${1:resource source}, ${2:[long maxlen}, ${3:[long offset]]})';},
	{display = 'stream_get_filters'; insert = '(${1:void})';},
	{display = 'stream_get_line'; insert = '(${1:resource stream}, ${2:int maxlen}, ${3:[string ending]})';},
	{display = 'stream_get_meta_data'; insert = '(${1:resource fp})';},
	{display = 'stream_get_transports'; insert = '()';},
	{display = 'stream_get_wrappers'; insert = '()';},
	{display = 'stream_is_local'; insert = '(${1:resource stream|string url})';},
	{display = 'stream_resolve_include_path'; insert = '(${1:string filename})';},
	{display = 'stream_select'; insert = '(${1:array &read_streams}, ${2:array &write_streams}, ${3:array &except_streams}, ${4:int tv_sec}, ${5:[int tv_usec]})';},
	{display = 'stream_set_blocking'; insert = '(${1:resource socket}, ${2:int mode})';},
	{display = 'stream_set_timeout'; insert = '(${1:resource stream}, ${2:int seconds}, ${3:[int microseconds]})';},
	{display = 'stream_set_write_buffer'; insert = '(${1:resource fp}, ${2:int buffer})';},
	{display = 'stream_socket_accept'; insert = '(${1:resource serverstream}, ${2:[ double timeout}, ${3:[string &peername ]]})';},
	{display = 'stream_socket_client'; insert = '(${1:string remoteaddress}, ${2:[long &errcode}, ${3:[string &errstring}, ${4:[double timeout}, ${5:[long flags}, ${6:[resource context]]]]]})';},
	{display = 'stream_socket_enable_crypto'; insert = '(${1:resource stream}, ${2:bool enable}, ${3:[int cryptokind}, ${4:[resource sessionstream]]})';},
	{display = 'stream_socket_get_name'; insert = '(${1:resource stream}, ${2:bool want_peer})';},
	{display = 'stream_socket_pair'; insert = '(${1:int domain}, ${2:int type}, ${3:int protocol})';},
	{display = 'stream_socket_recvfrom'; insert = '(${1:resource stream}, ${2:long amount}, ${3:[long flags}, ${4:[string &remote_addr]]})';},
	{display = 'stream_socket_sendto'; insert = '(${1:resouce stream}, ${2:string data}, ${3:[long flags}, ${4:[string target_addr]]})';},
	{display = 'stream_socket_server'; insert = '(${1:string localaddress}, ${2:[long &errcode}, ${3:[string &errstring}, ${4:[long flags}, ${5:[resource context]]]]})';},
	{display = 'stream_socket_shutdown'; insert = '(${1:resource stream}, ${2:int how})';},
	{display = 'stream_supports_lock'; insert = '(${1:resource stream})';},
	{display = 'stream_wrapper_register'; insert = '(${1:string protocol}, ${2:string classname}, ${3:[integer flags]})';},
	{display = 'stream_wrapper_restore'; insert = '(${1:string protocol})';},
	{display = 'stream_wrapper_unregister'; insert = '(${1:string protocol})';},
	{display = 'strftime'; insert = '(${1:string format}, ${2:[int timestamp]})';},
	{display = 'strip_tags'; insert = '(${1:string str}, ${2:[string allowable_tags]})';},
	{display = 'stripcslashes'; insert = '(${1:string str})';},
	{display = 'stripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'stripslashes'; insert = '(${1:string str})';},
	{display = 'stristr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part]})';},
	{display = 'strlen'; insert = '(${1:string str})';},
	{display = 'strnatcasecmp'; insert = '(${1:string s1}, ${2:string s2})';},
	{display = 'strnatcmp'; insert = '(${1:string s1}, ${2:string s2})';},
	{display = 'strncasecmp'; insert = '(${1:string str1}, ${2:string str2}, ${3:int len})';},
	{display = 'strncmp'; insert = '(${1:string str1}, ${2:string str2}, ${3:int len})';},
	{display = 'strpbrk'; insert = '(${1:string haystack}, ${2:string char_list})';},
	{display = 'strpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'strptime'; insert = '(${1:string timestamp}, ${2:string format})';},
	{display = 'strrchr'; insert = '(${1:string haystack}, ${2:string needle})';},
	{display = 'strrev'; insert = '(${1:string str})';},
	{display = 'strripos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'strrpos'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset]})';},
	{display = 'strspn'; insert = '(${1:string str}, ${2:string mask}, ${3:[start}, ${4:[len]]})';},
	{display = 'strstr'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[bool part]})';},
	{display = 'strtok'; insert = '(${1:[string str}, ${2:] string token})';},
	{display = 'strtolower'; insert = '(${1:string str})';},
	{display = 'strtotime'; insert = '(${1:string time}, ${2:[int now ]})';},
	{display = 'strtoupper'; insert = '(${1:string str})';},
	{display = 'strtr'; insert = '(${1:string str}, ${2:string from}, ${3:[string to]})';},
	{display = 'strval'; insert = '(${1:mixed var})';},
	{display = 'substr'; insert = '(${1:string str}, ${2:int start}, ${3:[int length]})';},
	{display = 'substr_compare'; insert = '(${1:string main_str}, ${2:string str}, ${3:int offset}, ${4:[int length}, ${5:[bool case_sensitivity]]})';},
	{display = 'substr_count'; insert = '(${1:string haystack}, ${2:string needle}, ${3:[int offset}, ${4:[int length]]})';},
	{display = 'substr_replace'; insert = '(${1:mixed str}, ${2:mixed repl}, ${3:mixed start}, ${4:[mixed length]})';},
	{display = 'sybase_affected_rows'; insert = '(${1:[resource link_id]})';},
	{display = 'sybase_close'; insert = '(${1:[resource link_id]})';},
	{display = 'sybase_connect'; insert = '(${1:[string host}, ${2:[string user}, ${3:[string password}, ${4:[string charset}, ${5:[string appname}, ${6:[bool new]]]]]]})';},
	{display = 'sybase_data_seek'; insert = '(${1:resource result}, ${2:int offset})';},
	{display = 'sybase_deadlock_retry_count'; insert = '(${1:int retry_count})';},
	{display = 'sybase_fetch_array'; insert = '(${1:resource result})';},
	{display = 'sybase_fetch_assoc'; insert = '(${1:resource result})';},
	{display = 'sybase_fetch_field'; insert = '(${1:resource result}, ${2:[int offset]})';},
	{display = 'sybase_fetch_object'; insert = '(${1:resource result}, ${2:[mixed object]})';},
	{display = 'sybase_fetch_row'; insert = '(${1:resource result})';},
	{display = 'sybase_field_seek'; insert = '(${1:resource result}, ${2:int offset})';},
	{display = 'sybase_free_result'; insert = '(${1:resource result})';},
	{display = 'sybase_get_last_message'; insert = '(${1:void})';},
	{display = 'sybase_min_client_severity'; insert = '(${1:int severity})';},
	{display = 'sybase_min_server_severity'; insert = '(${1:int severity})';},
	{display = 'sybase_num_fields'; insert = '(${1:resource result})';},
	{display = 'sybase_num_rows'; insert = '(${1:resource result})';},
	{display = 'sybase_pconnect'; insert = '(${1:[string host}, ${2:[string user}, ${3:[string password}, ${4:[string charset}, ${5:[string appname]]]]]})';},
	{display = 'sybase_query'; insert = '(${1:string query}, ${2:[resource link_id]})';},
	{display = 'sybase_result'; insert = '(${1:resource result}, ${2:int row}, ${3:mixed field})';},
	{display = 'sybase_select_db'; insert = '(${1:string database}, ${2:[resource link_id]})';},
	{display = 'sybase_set_message_handler'; insert = '(${1:mixed error_func}, ${2:[resource connection]})';},
	{display = 'sybase_unbuffered_query'; insert = '(${1:string query}, ${2:[resource link_id]})';},
	{display = 'symlink'; insert = '(${1:string target}, ${2:string link})';},
	{display = 'sys_get_temp_dir'; insert = '()';},
	{display = 'sys_getloadavg'; insert = '()';},
	{display = 'syslog'; insert = '(${1:int priority}, ${2:string message})';},
	{display = 'system'; insert = '(${1:string command}, ${2:[int &return_value]})';},
	{display = 'tan'; insert = '(${1:float number})';},
	{display = 'tanh'; insert = '(${1:float number})';},
	{display = 'tempnam'; insert = '(${1:string dir}, ${2:string prefix})';},
	{display = 'textdomain'; insert = '(${1:string domain})';},
	{display = 'tidy_access_count'; insert = '()';},
	{display = 'tidy_clean_repair'; insert = '()';},
	{display = 'tidy_config_count'; insert = '()';},
	{display = 'tidy_diagnose'; insert = '()';},
	{display = 'tidy_error_count'; insert = '()';},
	{display = 'tidy_get_body'; insert = '(${1:resource tidy})';},
	{display = 'tidy_get_config'; insert = '()';},
	{display = 'tidy_get_error_buffer'; insert = '(${1:[boolean detailed]})';},
	{display = 'tidy_get_head'; insert = '()';},
	{display = 'tidy_get_html'; insert = '()';},
	{display = 'tidy_get_html_ver'; insert = '()';},
	{display = 'tidy_get_opt_doc'; insert = '(${1:tidy resource}, ${2:string optname})';},
	{display = 'tidy_get_output'; insert = '()';},
	{display = 'tidy_get_release'; insert = '()';},
	{display = 'tidy_get_root'; insert = '()';},
	{display = 'tidy_get_status'; insert = '()';},
	{display = 'tidy_getopt'; insert = '(${1:string option})';},
	{display = 'tidy_is_xhtml'; insert = '()';},
	{display = 'tidy_is_xml'; insert = '()';},
	{display = 'tidy_parse_file'; insert = '(${1:string file}, ${2:[mixed config_options}, ${3:[string encoding}, ${4:[bool use_include_path]]]})';},
	{display = 'tidy_parse_string'; insert = '(${1:string input}, ${2:[mixed config_options}, ${3:[string encoding]]})';},
	{display = 'tidy_repair_file'; insert = '(${1:string filename}, ${2:[mixed config_file}, ${3:[string encoding}, ${4:[bool use_include_path]]]})';},
	{display = 'tidy_repair_string'; insert = '(${1:string data}, ${2:[mixed config_file}, ${3:[string encoding]]})';},
	{display = 'tidy_warning_count'; insert = '()';},
	{display = 'time'; insert = '(${1:void})';},
	{display = 'time_nanosleep'; insert = '(${1:long seconds}, ${2:long nanoseconds})';},
	{display = 'time_sleep_until'; insert = '(${1:float timestamp})';},
	{display = 'timezone_abbreviations_list'; insert = '()';},
	{display = 'timezone_identifiers_list'; insert = '(${1:[long what}, ${2:[string country]]})';},
	{display = 'timezone_location_get'; insert = '()';},
	{display = 'timezone_name_from_abbr'; insert = '(${1:string abbr}, ${2:[long gmtOffset}, ${3:[long isdst]]})';},
	{display = 'timezone_name_get'; insert = '(${1:DateTimeZone object})';},
	{display = 'timezone_offset_get'; insert = '(${1:DateTimeZone object}, ${2:DateTime object})';},
	{display = 'timezone_open'; insert = '(${1:string timezone})';},
	{display = 'timezone_transitions_get'; insert = '(${1:DateTimeZone object}, ${2:[long timestamp_begin}, ${3:[long timestamp_end ]]})';},
	{display = 'timezone_version_get'; insert = '()';},
	{display = 'tmpfile'; insert = '(${1:void})';},
	{display = 'token_get_all'; insert = '(${1:string source})';},
	{display = 'token_name'; insert = '(${1:int type})';},
	{display = 'touch'; insert = '(${1:string filename}, ${2:[int time}, ${3:[int atime]]})';},
	{display = 'trigger_error'; insert = '(${1:string messsage}, ${2:[int error_type]})';},
	{display = 'trim'; insert = '(${1:string str}, ${2:[string character_mask]})';},
	{display = 'uasort'; insert = '(${1:array array_arg}, ${2:string cmp_function})';},
	{display = 'ucfirst'; insert = '(${1:string str})';},
	{display = 'ucwords'; insert = '(${1:string str})';},
	{display = 'uksort'; insert = '(${1:array array_arg}, ${2:string cmp_function})';},
	{display = 'umask'; insert = '(${1:[int mask]})';},
	{display = 'uniqid'; insert = '(${1:[string prefix}, ${2:[bool more_entropy]]})';},
	{display = 'unixtojd'; insert = '(${1:[int timestamp]})';},
	{display = 'unlink'; insert = '(${1:string filename}, ${2:[context context]})';},
	{display = 'unpack'; insert = '(${1:string format}, ${2:string input})';},
	{display = 'unregister_tick_function'; insert = '(${1:string function_name})';},
	{display = 'unserialize'; insert = '(${1:string variable_representation})';},
	{display = 'unset'; insert = '(${1:mixed var}, ${2:[mixed var]})';},
	{display = 'urldecode'; insert = '(${1:string str})';},
	{display = 'urlencode'; insert = '(${1:string str})';},
	{display = 'usleep'; insert = '(${1:int micro_seconds})';},
	{display = 'usort'; insert = '(${1:array array_arg}, ${2:string cmp_function})';},
	{display = 'utf8_decode'; insert = '(${1:string data})';},
	{display = 'utf8_encode'; insert = '(${1:string data})';},
	{display = 'var_dump'; insert = '(${1:mixed var})';},
	{display = 'var_export'; insert = '(${1:mixed var}, ${2:[bool return]})';},
	{display = 'variant_abs'; insert = '(${1:mixed left})';},
	{display = 'variant_add'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_and'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_cast'; insert = '(${1:object variant}, ${2:int type})';},
	{display = 'variant_cat'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_cmp'; insert = '(${1:mixed left}, ${2:mixed right}, ${3:[int lcid}, ${4:[int flags]]})';},
	{display = 'variant_date_from_timestamp'; insert = '(${1:int timestamp})';},
	{display = 'variant_date_to_timestamp'; insert = '(${1:object variant})';},
	{display = 'variant_div'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_eqv'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_fix'; insert = '(${1:mixed left})';},
	{display = 'variant_get_type'; insert = '(${1:object variant})';},
	{display = 'variant_idiv'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_imp'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_int'; insert = '(${1:mixed left})';},
	{display = 'variant_mod'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_mul'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_neg'; insert = '(${1:mixed left})';},
	{display = 'variant_not'; insert = '(${1:mixed left})';},
	{display = 'variant_or'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_pow'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_round'; insert = '(${1:mixed left}, ${2:int decimals})';},
	{display = 'variant_set'; insert = '(${1:object variant}, ${2:mixed value})';},
	{display = 'variant_set_type'; insert = '(${1:object variant}, ${2:int type})';},
	{display = 'variant_sub'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'variant_xor'; insert = '(${1:mixed left}, ${2:mixed right})';},
	{display = 'version_compare'; insert = '(${1:string ver1}, ${2:string ver2}, ${3:[string oper]})';},
	{display = 'vfprintf'; insert = '(${1:resource stream}, ${2:string format}, ${3:array args})';},
	{display = 'virtual'; insert = '(${1:string filename})';},
	{display = 'vprintf'; insert = '(${1:string format}, ${2:array args})';},
	{display = 'vsprintf'; insert = '(${1:string format}, ${2:array args})';},
	{display = 'wddx_add_vars'; insert = '(${1:resource packet_id}, ${2:mixed var_names}, ${3:[mixed ...]})';},
	{display = 'wddx_deserialize'; insert = '(${1:mixed packet})';},
	{display = 'wddx_packet_end'; insert = '(${1:resource packet_id})';},
	{display = 'wddx_packet_start'; insert = '(${1:[string comment]})';},
	{display = 'wddx_serialize_value'; insert = '(${1:mixed var}, ${2:[string comment]})';},
	{display = 'wddx_serialize_vars'; insert = '(${1:mixed var_name}, ${2:[mixed ...]})';},
	{display = 'wordwrap'; insert = '(${1:string str}, ${2:[int width}, ${3:[string break}, ${4:[boolean cut]]]})';},
	{display = 'xml_error_string'; insert = '(${1:int code})';},
	{display = 'xml_get_current_byte_index'; insert = '(${1:resource parser})';},
	{display = 'xml_get_current_column_number'; insert = '(${1:resource parser})';},
	{display = 'xml_get_current_line_number'; insert = '(${1:resource parser})';},
	{display = 'xml_get_error_code'; insert = '(${1:resource parser})';},
	{display = 'xml_parse'; insert = '(${1:resource parser}, ${2:string data}, ${3:[int isFinal]})';},
	{display = 'xml_parse_into_struct'; insert = '(${1:resource parser}, ${2:string data}, ${3:array &values}, ${4:[array &index ]})';},
	{display = 'xml_parser_create'; insert = '(${1:[string encoding]})';},
	{display = 'xml_parser_create_ns'; insert = '(${1:[string encoding}, ${2:[string sep]]})';},
	{display = 'xml_parser_free'; insert = '(${1:resource parser})';},
	{display = 'xml_parser_get_option'; insert = '(${1:resource parser}, ${2:int option})';},
	{display = 'xml_parser_set_option'; insert = '(${1:resource parser}, ${2:int option}, ${3:mixed value})';},
	{display = 'xml_set_character_data_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_default_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_element_handler'; insert = '(${1:resource parser}, ${2:string shdl}, ${3:string ehdl})';},
	{display = 'xml_set_end_namespace_decl_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_external_entity_ref_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_notation_decl_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_object'; insert = '(${1:resource parser}, ${2:object &obj})';},
	{display = 'xml_set_processing_instruction_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_start_namespace_decl_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xml_set_unparsed_entity_decl_handler'; insert = '(${1:resource parser}, ${2:string hdl})';},
	{display = 'xmlrpc_decode'; insert = '(${1:string xml}, ${2:[string encoding]})';},
	{display = 'xmlrpc_decode_request'; insert = '(${1:string xml}, ${2:string& method}, ${3:[string encoding]})';},
	{display = 'xmlrpc_encode'; insert = '(${1:mixed value})';},
	{display = 'xmlrpc_encode_request'; insert = '(${1:string method}, ${2:mixed params}, ${3:[array output_options]})';},
	{display = 'xmlrpc_get_type'; insert = '(${1:mixed value})';},
	{display = 'xmlrpc_is_fault'; insert = '(${1:array})';},
	{display = 'xmlrpc_parse_method_descriptions'; insert = '(${1:string xml})';},
	{display = 'xmlrpc_server_add_introspection_data'; insert = '(${1:resource server}, ${2:array desc})';},
	{display = 'xmlrpc_server_call_method'; insert = '(${1:resource server}, ${2:string xml}, ${3:mixed user_data}, ${4:[array output_options]})';},
	{display = 'xmlrpc_server_create'; insert = '(${1:void})';},
	{display = 'xmlrpc_server_destroy'; insert = '(${1:resource server})';},
	{display = 'xmlrpc_server_register_introspection_callback'; insert = '(${1:resource server}, ${2:string function})';},
	{display = 'xmlrpc_server_register_method'; insert = '(${1:resource server}, ${2:string method_name}, ${3:string function})';},
	{display = 'xmlrpc_set_type'; insert = '(${1:string value}, ${2:string type})';},
	{display = 'xmlwriter_end_attribute'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_cdata'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_comment'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_document'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_dtd'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_dtd_attlist'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_dtd_element'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_dtd_entity'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_element'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_end_pi'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_flush'; insert = '(${1:resource xmlwriter}, ${2:[bool empty]})';},
	{display = 'xmlwriter_full_end_element'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_open_memory'; insert = '()';},
	{display = 'xmlwriter_open_uri'; insert = '(${1:resource xmlwriter}, ${2:string source})';},
	{display = 'xmlwriter_output_memory'; insert = '(${1:resource xmlwriter}, ${2:[bool flush]})';},
	{display = 'xmlwriter_set_indent'; insert = '(${1:resource xmlwriter}, ${2:bool indent})';},
	{display = 'xmlwriter_set_indent_string'; insert = '(${1:resource xmlwriter}, ${2:string indentString})';},
	{display = 'xmlwriter_start_attribute'; insert = '(${1:resource xmlwriter}, ${2:string name})';},
	{display = 'xmlwriter_start_attribute_ns'; insert = '(${1:resource xmlwriter}, ${2:string prefix}, ${3:string name}, ${4:string uri})';},
	{display = 'xmlwriter_start_cdata'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_start_comment'; insert = '(${1:resource xmlwriter})';},
	{display = 'xmlwriter_start_document'; insert = '(${1:resource xmlwriter}, ${2:string version}, ${3:string encoding}, ${4:string standalone})';},
	{display = 'xmlwriter_start_dtd'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string pubid}, ${4:string sysid})';},
	{display = 'xmlwriter_start_dtd_attlist'; insert = '(${1:resource xmlwriter}, ${2:string name})';},
	{display = 'xmlwriter_start_dtd_element'; insert = '(${1:resource xmlwriter}, ${2:string name})';},
	{display = 'xmlwriter_start_dtd_entity'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:bool isparam})';},
	{display = 'xmlwriter_start_element'; insert = '(${1:resource xmlwriter}, ${2:string name})';},
	{display = 'xmlwriter_start_element_ns'; insert = '(${1:resource xmlwriter}, ${2:string prefix}, ${3:string name}, ${4:string uri})';},
	{display = 'xmlwriter_start_pi'; insert = '(${1:resource xmlwriter}, ${2:string target})';},
	{display = 'xmlwriter_text'; insert = '(${1:resource xmlwriter}, ${2:string content})';},
	{display = 'xmlwriter_write_attribute'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string content})';},
	{display = 'xmlwriter_write_attribute_ns'; insert = '(${1:resource xmlwriter}, ${2:string prefix}, ${3:string name}, ${4:string uri}, ${5:string content})';},
	{display = 'xmlwriter_write_cdata'; insert = '(${1:resource xmlwriter}, ${2:string content})';},
	{display = 'xmlwriter_write_comment'; insert = '(${1:resource xmlwriter}, ${2:string content})';},
	{display = 'xmlwriter_write_dtd'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string pubid}, ${4:string sysid}, ${5:string subset})';},
	{display = 'xmlwriter_write_dtd_attlist'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string content})';},
	{display = 'xmlwriter_write_dtd_element'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string content})';},
	{display = 'xmlwriter_write_dtd_entity'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:string content}, ${4:[int pe}, ${5:[string pubid}, ${6:[string sysid}, ${7:[string ndataid]]]]})';},
	{display = 'xmlwriter_write_element'; insert = '(${1:resource xmlwriter}, ${2:string name}, ${3:[string content]})';},
	{display = 'xmlwriter_write_element_ns'; insert = '(${1:resource xmlwriter}, ${2:string prefix}, ${3:string name}, ${4:string uri}, ${5:[string content]})';},
	{display = 'xmlwriter_write_pi'; insert = '(${1:resource xmlwriter}, ${2:string target}, ${3:string content})';},
	{display = 'xmlwriter_write_raw'; insert = '(${1:resource xmlwriter}, ${2:string content})';},
	{display = 'xsl_xsltprocessor_get_parameter'; insert = '(${1:string namespace}, ${2:string name})';},
	{display = 'xsl_xsltprocessor_has_exslt_support'; insert = '()';},
	{display = 'xsl_xsltprocessor_import_stylesheet'; insert = '(${1:domdocument doc})';},
	{display = 'xsl_xsltprocessor_register_php_functions'; insert = '(${1:[mixed $restrict]})';},
	{display = 'xsl_xsltprocessor_remove_parameter'; insert = '(${1:string namespace}, ${2:string name})';},
	{display = 'xsl_xsltprocessor_set_parameter'; insert = '(${1:string namespace}, ${2:mixed name}, ${3:[string value]})';},
	{display = 'xsl_xsltprocessor_set_profiling'; insert = '(${1:string filename})';},
	{display = 'xsl_xsltprocessor_transform_to_doc'; insert = '(${1:domnode doc})';},
	{display = 'xsl_xsltprocessor_transform_to_uri'; insert = '(${1:domdocument doc}, ${2:string uri})';},
	{display = 'xsl_xsltprocessor_transform_to_xml'; insert = '(${1:domdocument doc})';},
	{display = 'zend_logo_guid'; insert = '(${1:void})';},
	{display = 'zend_version'; insert = '(${1:void})';},
	{display = 'zip_close'; insert = '(${1:resource zip})';},
	{display = 'zip_entry_close'; insert = '(${1:resource zip_ent})';},
	{display = 'zip_entry_compressedsize'; insert = '(${1:resource zip_entry})';},
	{display = 'zip_entry_compressionmethod'; insert = '(${1:resource zip_entry})';},
	{display = 'zip_entry_filesize'; insert = '(${1:resource zip_entry})';},
	{display = 'zip_entry_name'; insert = '(${1:resource zip_entry})';},
	{display = 'zip_entry_open'; insert = '(${1:resource zip_dp}, ${2:resource zip_entry}, ${3:[string mode]})';},
	{display = 'zip_entry_read'; insert = '(${1:resource zip_entry}, ${2:[int len]})';},
	{display = 'zip_open'; insert = '(${1:string filename})';},
	{display = 'zip_read'; insert = '(${1:resource zip})';},
	{display = 'zlib_get_coding_type'; insert = '(${1:void})';},
)
